<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RfmUsb.Net</name>
    </assembly>
    <members>
        <member name="T:RfmUsb.Net.AddressFilter">
            <summary>
            Defines address based filtering in Rx mode
            </summary>
        </member>
        <member name="F:RfmUsb.Net.AddressFilter.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:RfmUsb.Net.AddressFilter.Node">
            <summary>
            Node
            </summary>
        </member>
        <member name="F:RfmUsb.Net.AddressFilter.NodeBroaddcast">
            <summary>
            Node or Broadcast
            </summary>
        </member>
        <member name="F:RfmUsb.Net.AddressFilter.Reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="T:RfmUsb.Net.AutoRestartRxMode">
            <summary>
            Controls the automatic restart of the receiver 
            after the reception of a valid packet
            </summary>
        </member>
        <member name="F:RfmUsb.Net.AutoRestartRxMode.Off">
            <summary>
            Off
            </summary>
        </member>
        <member name="F:RfmUsb.Net.AutoRestartRxMode.OnWithoutPllRelock">
            <summary>
            On, without waiting for the PLL to re-lock
            </summary>
        </member>
        <member name="F:RfmUsb.Net.AutoRestartRxMode.OnWaitForPllLock">
            <summary>
            On, wait for the PLL to lock (frequency changed)
            </summary>
        </member>
        <member name="F:RfmUsb.Net.AutoRestartRxMode.Reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="T:RfmUsb.Net.BufferedIoInfo">
            <summary>
            The Io buffer information
            </summary>
        </member>
        <member name="M:RfmUsb.Net.BufferedIoInfo.#ctor(System.Int32,System.Int32)">
            <summary>
            Create an instance of an <see cref="T:RfmUsb.Net.BufferedIoInfo"/>
            </summary>
            <param name="capacity">The capacity</param>
            <param name="count">The count</param>
        </member>
        <member name="P:RfmUsb.Net.BufferedIoInfo.Capacity">
            <summary>
            The Io buffer capacity
            </summary>
        </member>
        <member name="P:RfmUsb.Net.BufferedIoInfo.Count">
            <summary>
            The Io buffer count
            </summary>
        </member>
        <member name="T:RfmUsb.Net.ContinuousDagc">
            <summary>
            Continuous adjust of the digital gain
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ContinuousDagc.Normal">
            <summary>
            Normal Mode
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ContinuousDagc.ImprovedLowBeta1">
            <summary>
            Improved margin, use if AfcLowBetaOn=1
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ContinuousDagc.ImprovedLowBeta0">
            <summary>
            Improved margin, use if AfcLowBetaOn=0
            </summary>
        </member>
        <member name="T:RfmUsb.Net.CrcWhiteningType">
            <summary>
            Selects the CRC and whitening algorithms
            </summary>
        </member>
        <member name="F:RfmUsb.Net.CrcWhiteningType.CrcCCITT">
            <summary>
            CCITT CRC implementation with standard whitening
            </summary>
        </member>
        <member name="F:RfmUsb.Net.CrcWhiteningType.CrcIbm">
            <summary>
            IBM CRC implementation with alternate whitening
            </summary>
        </member>
        <member name="T:RfmUsb.Net.Rfm69DataMode">
            <summary>
            Data processing mode
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm69DataMode.Packet">
            <summary>
            Packet Mode
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm69DataMode.Reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm69DataMode.ContinousModeWithBitSync">
            <summary>
            Continuous mode with bit synchronizer
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm69DataMode.ContinousModeWithoutBitSync">
            <summary>
            Continuous mode without bit synchronizer
            </summary>
        </member>
        <member name="T:RfmUsb.Net.DccFreq">
            <summary>
            Cut-off frequency of the DC offset canceller (DCC)
            </summary>
        </member>
        <member name="F:RfmUsb.Net.DccFreq.FreqPercent16">
            <summary>
            Sixteen percent of the RxBw
            </summary>
        </member>
        <member name="F:RfmUsb.Net.DccFreq.FreqPercent8">
            <summary>
            Eight percent of the RxBw
            </summary>
        </member>
        <member name="F:RfmUsb.Net.DccFreq.FreqPercent4">
            <summary>
            Four percent of the RxBw (Default)
            </summary>
        </member>
        <member name="F:RfmUsb.Net.DccFreq.FreqPercent2">
            <summary>
            Two percent of the RxBw
            </summary>
        </member>
        <member name="F:RfmUsb.Net.DccFreq.FreqPercent1">
            <summary>
            One percent of the RxBw
            </summary>
        </member>
        <member name="F:RfmUsb.Net.DccFreq.FreqPercent0_5">
            <summary>
            Half percent of the RxBw
            </summary>
        </member>
        <member name="F:RfmUsb.Net.DccFreq.FreqPercent0_25">
            <summary>
            Quarter of a percent of the RxBw
            </summary>
        </member>
        <member name="F:RfmUsb.Net.DccFreq.FreqPercent0_125">
            <summary>
            .125 percent of the RxBw
            </summary>
        </member>
        <member name="T:RfmUsb.Net.DcFreeEncoding">
            <summary>
            Defines DC-free encoding/decoding
            </summary>
        </member>
        <member name="F:RfmUsb.Net.DcFreeEncoding.None">
            <summary>
            None Off
            </summary>
        </member>
        <member name="F:RfmUsb.Net.DcFreeEncoding.Manchester">
            <summary>
            Manchester encoding
            </summary>
        </member>
        <member name="F:RfmUsb.Net.DcFreeEncoding.Whitening">
            <summary>
            Data whitening
            </summary>
        </member>
        <member name="F:RfmUsb.Net.DcFreeEncoding.Reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="T:RfmUsb.Net.Dio">
            <summary>
            The Rfm69 digital io pins
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Dio.Dio0">
            <summary>
            Dio0 pin
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Dio.Dio1">
            <summary>
            Dio1 pin
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Dio.Dio2">
            <summary>
            Dio2 pin
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Dio.Dio3">
            <summary>
            Dio3 pin
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Dio.Dio4">
            <summary>
            Dio4 pin
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Dio.Dio5">
            <summary>
            Dio5 pin
            </summary>
        </member>
        <member name="T:RfmUsb.Net.DioIrq">
            <summary>
            The Dio irq line interrupt bit
            </summary>
        </member>
        <member name="F:RfmUsb.Net.DioIrq.None">
            <summary>
            No Dio line set
            </summary>
        </member>
        <member name="F:RfmUsb.Net.DioIrq.Dio0">
            <summary>
            Dio0 set
            </summary>
        </member>
        <member name="F:RfmUsb.Net.DioIrq.Dio1">
            <summary>
            Dio1 set
            </summary>
        </member>
        <member name="F:RfmUsb.Net.DioIrq.Dio2">
            <summary>
            Dio1 set
            </summary>
        </member>
        <member name="F:RfmUsb.Net.DioIrq.Dio3">
            <summary>
            Dio3 set
            </summary>
        </member>
        <member name="F:RfmUsb.Net.DioIrq.Dio4">
            <summary>
            Dio3 set
            </summary>
        </member>
        <member name="F:RfmUsb.Net.DioIrq.Dio5">
            <summary>
            Dio5 set
            </summary>
        </member>
        <member name="T:RfmUsb.Net.DioMapping">
            <summary>
            The Rfm69 digital io pin mappings
            </summary>
        </member>
        <member name="F:RfmUsb.Net.DioMapping.DioMapping0">
            <summary>
            Dio Mapping 0
            </summary>
        </member>
        <member name="F:RfmUsb.Net.DioMapping.DioMapping1">
            <summary>
            Dio Mapping 1
            </summary>
        </member>
        <member name="F:RfmUsb.Net.DioMapping.DioMapping2">
            <summary>
            Dio Mapping 2
            </summary>
        </member>
        <member name="F:RfmUsb.Net.DioMapping.DioMapping3">
            <summary>
            Dio Mapping 3
            </summary>
        </member>
        <member name="T:RfmUsb.Net.EnterCondition">
            <summary>
            The interrupt condition for entering the intermediate mode
            </summary>
        </member>
        <member name="F:RfmUsb.Net.EnterCondition.Off">
            <summary>
            None (AutoModes Off)
            </summary>
        </member>
        <member name="F:RfmUsb.Net.EnterCondition.FifoNotEmpty">
            <summary>
            Rising edge of FifoNotEmpty
            </summary>
        </member>
        <member name="F:RfmUsb.Net.EnterCondition.FifoLevel">
            <summary>
            Rising edge of FifoLevel
            </summary>
        </member>
        <member name="F:RfmUsb.Net.EnterCondition.CrcOk">
            <summary>
            Rising edge of CrcOk
            </summary>
        </member>
        <member name="F:RfmUsb.Net.EnterCondition.PayloadReady">
            <summary>
            Rising edge of PayloadReady
            </summary>
        </member>
        <member name="F:RfmUsb.Net.EnterCondition.SyncAddressMatch">
            <summary>
            Rising edge of SyncAddress
            </summary>
        </member>
        <member name="F:RfmUsb.Net.EnterCondition.PacketSent">
            <summary>
            Rising edge of PacketSent
            </summary>
        </member>
        <member name="F:RfmUsb.Net.EnterCondition.FallingEdgeFifoNotEmpty">
            <summary>
            Falling edge of FifoNotEmpty (i.e. FIFO empty)
            </summary>
        </member>
        <member name="T:RfmUsb.Net.ErrorCodingRate">
            <summary>
            Error coding rate
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ErrorCodingRate.FourFive">
            <summary>
            4/5
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ErrorCodingRate.FourSix">
            <summary>
            4/6
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ErrorCodingRate.FourSeven">
            <summary>
            4/7
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ErrorCodingRate.FourEight">
            <summary>
            4/8
            </summary>
        </member>
        <member name="T:RfmUsb.Net.Exceptions.RfmUsbBufferedIoNotEnabledException">
            <summary>
            Exception thrown if the IO buffering is not enabled
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Exceptions.RfmUsbBufferedIoNotEnabledException.#ctor">
            <summary>
            Create an instance of <see cref="T:RfmUsb.Net.Exceptions.RfmUsbBufferedIoNotEnabledException"/>
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Exceptions.RfmUsbBufferedIoNotEnabledException.#ctor(System.String)">
            <summary>
            Create an instance of <see cref="T:RfmUsb.Net.Exceptions.RfmUsbBufferedIoNotEnabledException"/>
            </summary>
            <param name="message">The exception message</param>
        </member>
        <member name="M:RfmUsb.Net.Exceptions.RfmUsbBufferedIoNotEnabledException.#ctor(System.String,System.Exception)">
            <summary>
            Create an instance of <see cref="T:RfmUsb.Net.Exceptions.RfmUsbBufferedIoNotEnabledException"/>
            </summary>
            <param name="message">The message</param>
            <param name="inner">The inner <see cref="T:System.Exception"/></param>
        </member>
        <member name="T:RfmUsb.Net.Exceptions.RfmUsbBufferedIoOverflowException">
            <summary>
            Exception thrown if the IO buffer overflows
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Exceptions.RfmUsbBufferedIoOverflowException.#ctor">
            <summary>
            Create an instance of <see cref="T:RfmUsb.Net.Exceptions.RfmUsbBufferedIoOverflowException"/>
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Exceptions.RfmUsbBufferedIoOverflowException.#ctor(System.String)">
            <summary>
            Create an instance of <see cref="T:RfmUsb.Net.Exceptions.RfmUsbBufferedIoOverflowException"/>
            </summary>
            <param name="message">The exception message</param>
        </member>
        <member name="M:RfmUsb.Net.Exceptions.RfmUsbBufferedIoOverflowException.#ctor(System.String,System.Exception)">
            <summary>
            Create an instance of <see cref="T:RfmUsb.Net.Exceptions.RfmUsbBufferedIoOverflowException"/>
            </summary>
            <param name="message">The message</param>
            <param name="inner">The inner <see cref="T:System.Exception"/></param>
        </member>
        <member name="T:RfmUsb.Net.Exceptions.RfmUsbCommandExecutionException">
            <summary>
            Throw when a command execution fails
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Exceptions.RfmUsbCommandExecutionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RfmUsb.Net.Exceptions.RfmUsbCommandExecutionException"/> class.
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Exceptions.RfmUsbCommandExecutionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RfmUsb.Net.Exceptions.RfmUsbCommandExecutionException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:RfmUsb.Net.Exceptions.RfmUsbCommandExecutionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:RfmUsb.Net.Exceptions.RfmUsbCommandExecutionException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception,
            or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:RfmUsb.Net.Exceptions.RfmUsbInvalidDeviceTypeException">
            <summary>
            Exception thrown if the attached RfmUsb device is not correct device
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Exceptions.RfmUsbInvalidDeviceTypeException.#ctor">
            <summary>
            Create an instance of <see cref="T:RfmUsb.Net.Exceptions.RfmUsbInvalidDeviceTypeException"/>
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Exceptions.RfmUsbInvalidDeviceTypeException.#ctor(System.String)">
            <summary>
            Create an instance of <see cref="T:RfmUsb.Net.Exceptions.RfmUsbInvalidDeviceTypeException"/>
            </summary>
            <param name="message">The exception message</param>
        </member>
        <member name="M:RfmUsb.Net.Exceptions.RfmUsbInvalidDeviceTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Create an instance of <see cref="T:RfmUsb.Net.Exceptions.RfmUsbInvalidDeviceTypeException"/>
            </summary>
            <param name="message">The message</param>
            <param name="inner">The inner <see cref="T:System.Exception"/></param>
        </member>
        <member name="T:RfmUsb.Net.Exceptions.RfmUsbSerialPortNotFoundException">
            <summary>
            Throw when the specified serial port is not found
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Exceptions.RfmUsbSerialPortNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RfmUsb.Net.Exceptions.RfmUsbSerialPortNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Exceptions.RfmUsbSerialPortNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RfmUsb.Net.Exceptions.RfmUsbSerialPortNotFoundException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:RfmUsb.Net.Exceptions.RfmUsbSerialPortNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:RfmUsb.Net.Exceptions.RfmUsbSerialPortNotFoundException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception,
            or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:RfmUsb.Net.Exceptions.RfmUsbSerialPortOpenFailedException">
            <summary>
            Exception thrown when the serial port fails to open
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Exceptions.RfmUsbSerialPortOpenFailedException.#ctor">
            <summary>
            Create an instance of <see cref="T:RfmUsb.Net.Exceptions.RfmUsbSerialPortOpenFailedException"/>
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Exceptions.RfmUsbSerialPortOpenFailedException.#ctor(System.String)">
            <summary>
            Create an instance of <see cref="T:RfmUsb.Net.Exceptions.RfmUsbSerialPortOpenFailedException"/>
            </summary>
            <param name="message">The exception message</param>
        </member>
        <member name="M:RfmUsb.Net.Exceptions.RfmUsbSerialPortOpenFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Create an instance of <see cref="T:RfmUsb.Net.Exceptions.RfmUsbSerialPortOpenFailedException"/>
            </summary>
            <param name="message">The message</param>
            <param name="inner">The inner <see cref="T:System.Exception"/></param>
        </member>
        <member name="T:RfmUsb.Net.Exceptions.RfmUsbTimeoutException">
            <summary>
            Exception thrown when the serial port receive timeout
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Exceptions.RfmUsbTimeoutException.#ctor">
            <summary>
            Create an instance of <see cref="T:RfmUsb.Net.Exceptions.RfmUsbTimeoutException"/>
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Exceptions.RfmUsbTimeoutException.#ctor(System.String)">
            <summary>
            Create an instance of <see cref="T:RfmUsb.Net.Exceptions.RfmUsbTimeoutException"/>
            </summary>
            <param name="message">The exception message</param>
        </member>
        <member name="M:RfmUsb.Net.Exceptions.RfmUsbTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Create an instance of <see cref="T:RfmUsb.Net.Exceptions.RfmUsbTimeoutException"/>
            </summary>
            <param name="message">The message</param>
            <param name="inner">The inner <see cref="T:System.Exception"/></param>
        </member>
        <member name="T:RfmUsb.Net.Exceptions.RfmUsbTransmitException">
            <summary>
            Throw when a error occurs during transmission
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Exceptions.RfmUsbTransmitException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RfmUsb.Net.Exceptions.RfmUsbTransmitException"/> class.
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Exceptions.RfmUsbTransmitException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RfmUsb.Net.Exceptions.RfmUsbTransmitException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:RfmUsb.Net.Exceptions.RfmUsbTransmitException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:RfmUsb.Net.Exceptions.RfmUsbTransmitException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception,
            or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:RfmUsb.Net.Exceptions.RfmUsbTransmitNotEnabledException">
            <summary>
            Exception thrown if the attached RfmUsb device is not in transmit mode
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Exceptions.RfmUsbTransmitNotEnabledException.#ctor">
            <summary>
            Create an instance of <see cref="T:RfmUsb.Net.Exceptions.RfmUsbTransmitNotEnabledException"/>
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Exceptions.RfmUsbTransmitNotEnabledException.#ctor(System.String)">
            <summary>
            Create an instance of <see cref="T:RfmUsb.Net.Exceptions.RfmUsbTransmitNotEnabledException"/>
            </summary>
            <param name="message">The exception message</param>
        </member>
        <member name="M:RfmUsb.Net.Exceptions.RfmUsbTransmitNotEnabledException.#ctor(System.String,System.Exception)">
            <summary>
            Create an instance of <see cref="T:RfmUsb.Net.Exceptions.RfmUsbTransmitNotEnabledException"/>
            </summary>
            <param name="message">The message</param>
            <param name="inner">The inner <see cref="T:System.Exception"/></param>
        </member>
        <member name="T:RfmUsb.Net.ExitCondition">
            <summary>
            The interrupt condition for exiting the intermediate mode
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ExitCondition.Off">
            <summary>
            None (AutoModes Off)
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ExitCondition.FifoNotEmpty">
            <summary>
            Falling edge of FifoNotEmpty (i.e. FIFO empty)
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ExitCondition.FifoLevel">
            <summary>
            Rising edge of FifoLevel or Timeout
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ExitCondition.CrcOk">
            <summary>
            Rising edge of CrcOk or Timeout
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ExitCondition.PayloadReady">
            <summary>
            Rising edge of PayloadReady or Timeout
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ExitCondition.SyncAddressMatch">
            <summary>
            Rising edge of SyncAddress or Timeout
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ExitCondition.PacketSent">
            <summary>
            Rising edge of PacketSent
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ExitCondition.Timeout">
            <summary>
            Rising edge of Timeout
            </summary>
        </member>
        <member name="T:RfmUsb.Net.FromPacketReceived">
            <summary>
            Controls the state-machine transition from the PacketReceived state
            </summary>
        </member>
        <member name="F:RfmUsb.Net.FromPacketReceived.ToSequencerOff">
            <summary>
            To SequencerOff state
            </summary>
        </member>
        <member name="F:RfmUsb.Net.FromPacketReceived.ToTransmitStateOnFifoEmpty">
            <summary>
            To Transmit state on a FifoEmpty interrupt
            </summary>
        </member>
        <member name="F:RfmUsb.Net.FromPacketReceived.ToLowPowerSelection">
            <summary>
            To LowPowerSelection
            </summary>
        </member>
        <member name="F:RfmUsb.Net.FromPacketReceived.ToReceiveViaFSMode">
            <summary>
            To Receive via FS mode, if frequency was changed
            </summary>
        </member>
        <member name="F:RfmUsb.Net.FromPacketReceived.ToReceiveState">
            <summary>
            To Receive state (no frequencychange)
            </summary>
        </member>
        <member name="T:RfmUsb.Net.FromReceive">
            <summary>
            Controls the Sequencer transition from the Receivestate
            </summary>
        </member>
        <member name="F:RfmUsb.Net.FromReceive.UnusedA">
            <summary>
            Unused state
            </summary>
        </member>
        <member name="F:RfmUsb.Net.FromReceive.ToPacketReceivedOnPayloadReady">
            <summary>
            To PacketReceived On PayloadReady Irq
            </summary>
        </member>
        <member name="F:RfmUsb.Net.FromReceive.ToLowPowerSelectionOnPayLoadReady">
            <summary>
            To LowPowerSelection On PayloadReady Irq
            </summary>
        </member>
        <member name="F:RfmUsb.Net.FromReceive.ToPacketReceivedStateOnCrcOk">
            <summary>
            To PacketReceived On CrcOk Irq
            </summary>
        </member>
        <member name="F:RfmUsb.Net.FromReceive.ToSequencerOffOnRssi">
            <summary>
            To SequencerOff On Rssi Irq
            </summary>
        </member>
        <member name="F:RfmUsb.Net.FromReceive.ToSequencerOffOnSyncAddress">
            <summary>
            To SequencerOff On SyncAddress Irq
            </summary>
        </member>
        <member name="F:RfmUsb.Net.FromReceive.ToSequencerOffOnPreambleDetect">
            <summary>
            To SequencerOff On SyncAddress Irq
            </summary>
        </member>
        <member name="F:RfmUsb.Net.FromReceive.UnusedB">
            <summary>
            Unused state
            </summary>
        </member>
        <member name="T:RfmUsb.Net.FromRxTimeout">
            <summary>
            Controls the state-machine transition from the Receive state on a
            RxTimeout interrupt(and on PayloadReady if FromReceive = ToPacketReceivedStateOnCrcOk
            </summary>
        </member>
        <member name="F:RfmUsb.Net.FromRxTimeout.ToReceive">
            <summary>
            o Receive
            </summary>
        </member>
        <member name="F:RfmUsb.Net.FromRxTimeout.ToTransmit">
            <summary>
            To Transmit
            </summary>
        </member>
        <member name="F:RfmUsb.Net.FromRxTimeout.ToLowPowerSelection">
            <summary>
            To Low power selection
            </summary>
        </member>
        <member name="F:RfmUsb.Net.FromRxTimeout.ToSequencerOff">
            <summary>
            To Sequencer Off
            </summary>
        </member>
        <member name="T:RfmUsb.Net.FromStart">
            <summary>
            Sequencer transition when sequencer started
            </summary>
        </member>
        <member name="F:RfmUsb.Net.FromStart.ToLowPowerSelection">
            <summary>
            To Low Power
            </summary>
        </member>
        <member name="F:RfmUsb.Net.FromStart.ToReceive">
            <summary>
            To Receive
            </summary>
        </member>
        <member name="F:RfmUsb.Net.FromStart.ToTransmit">
            <summary>
            To Transmit
            </summary>
        </member>
        <member name="F:RfmUsb.Net.FromStart.ToTransmitOnFifoLevel">
            <summary>
            To transmit on fifo level
            </summary>
        </member>
        <member name="T:RfmUsb.Net.FskModulationShaping">
            <summary>
            Fsk data shaping
            </summary>
        </member>
        <member name="F:RfmUsb.Net.FskModulationShaping.None">
            <summary>
            No Shapping
            </summary>
        </member>
        <member name="F:RfmUsb.Net.FskModulationShaping.GaussianBt1_0">
            <summary>
            Gaussian filter, BT = 1.0
            </summary>
        </member>
        <member name="F:RfmUsb.Net.FskModulationShaping.GaussianBt0_5">
            <summary>
            Gaussian filter, BT = 0.5
            </summary>
        </member>
        <member name="F:RfmUsb.Net.FskModulationShaping.GaussianBt0_3">
            <summary>
            Gaussian filter, BT = 0.3
            </summary>
        </member>
        <member name="T:RfmUsb.Net.HexUtil">
            <summary>
            Set of hex string extensions
            </summary>
        </member>
        <member name="M:RfmUsb.Net.HexUtil.ToBytes(System.String)">
            <summary>
            Convert a hex string to a sequence of bytes
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="T:RfmUsb.Net.HopChannel">
            <summary>
            The FHSS hop channel information
            </summary>
        </member>
        <member name="M:RfmUsb.Net.HopChannel.#ctor(System.Boolean,System.Boolean,System.Byte)">
            <summary>
            Create a <see cref="T:RfmUsb.Net.HopChannel"/> instance
            </summary>
            <param name="pllTimeout"></param>
            <param name="crcOnPayload"></param>
            <param name="channel"></param>
        </member>
        <member name="P:RfmUsb.Net.HopChannel.PllTimeout">
            <summary>
            PLL failed to lock while attempting a TX/RX/CAD operation
            </summary>
            <remarks>
            true : PLL did not lock
            false : PLL did lock
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.HopChannel.CrcOnPayload">
            <summary>
            CRC Information extracted from the received packet header (Explicit header mode only)
            </summary>
            <remarks>
            false : Header indicates CRC off
            true : Header indicates CRC on
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.HopChannel.Channel">
            <summary>
            Current value of frequency hopping channel in use
            </summary>
        </member>
        <member name="T:RfmUsb.Net.IntermediateMode">
            <summary>
            Intermediate mode
            </summary>
        </member>
        <member name="F:RfmUsb.Net.IntermediateMode.Sleep">
            <summary>
            Sleep mode (SLEEP)
            </summary>
        </member>
        <member name="F:RfmUsb.Net.IntermediateMode.Standby">
            <summary>
            Standby mode (STDBY)
            </summary>
        </member>
        <member name="F:RfmUsb.Net.IntermediateMode.Rx">
            <summary>
            Receiver mode (RX)
            </summary>
        </member>
        <member name="F:RfmUsb.Net.IntermediateMode.Tx">
            <summary>
            Transmitter mode (TX)
            </summary>
        </member>
        <member name="T:RfmUsb.Net.Io.RfmUsbStream">
            <summary>
            The stream for reading and writing to the RfmUsb buffered IO
            </summary>
        </member>
        <member name="P:RfmUsb.Net.Io.RfmUsbStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Io.RfmUsbStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Io.RfmUsbStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Io.RfmUsbStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Io.RfmUsbStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.Io.RfmUsbStream.Flush">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.Io.RfmUsbStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.Io.RfmUsbStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.Io.RfmUsbStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.Io.RfmUsbStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:RfmUsb.Net.IRfm">
            <summary>
            An Rfm device
            </summary>
        </member>
        <member name="E:RfmUsb.Net.IRfm.DioInterrupt">
            <summary>
            Event raised when an DIO Irq line interrupt occurs
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.AddressFiltering">
            <summary>
            Defines address based filtering in Rx
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.Afc">
            <summary>
            The Afc value
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.AfcAutoClear">
            <summary>
            Only valid if AfcAutoOn is set
            </summary>
            <remarks>
            <para><see langword="false"/> AFC register is not cleared before a new AFC phase</para>
            <para><see langword="true"/> AFC register is cleared before a new AFC phase</para>
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm.AfcAutoOn">
            <summary>
            Enable Afc auto on
            </summary>
            <remarks>
            <para><see langword="false"/> AFC is performed each time AfcStart is set</para>
            <para><see langword="true"/> AFC is performed each time Rx mode is entered</para>
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm.BitRate">
            <summary>
            Get or set the radio Tx/Rx bit rate
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.BroadcastAddress">
            <summary>
            Broadcast address used in address filtering
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.BufferedIoEnable">
            <summary>
            Enable or disable buffered packet IO
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.BufferedIoInfo">
            <summary>
            Get the <see cref="P:RfmUsb.Net.IRfm.BufferedIoInfo"/>
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.CrcAutoClearOff">
            <summary>
            Defines the behavior of the packet handler when CRC check fails:
            </summary>
            <remarks>
            <para><see langword="false"/> Clear FIFO and restart new packet reception. NoPayloadReady interrupt issued</para>
            <para><see langword="true"/> Do not clear FIFO. PayloadReady interrupt issued</para>
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm.CrcOn">
            <summary>
            Enables CRC calculation/check (Tx/Rx)
            </summary>
            <remarks>
            <para><see langword="false"/> Off</para>
            <para><see langword="true"/> On</para>
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm.DcFreeEncoding">
            <summary>
            Defines DC-free encoding/decoding performed
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.DioInterruptMask">
            <summary>
            Gets or sets the Dio Interrupt Mask
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.Fei">
            <summary>
            The Fei value
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.Fifo">
            <summary>
            Get or set the FIFO data
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.FifoThreshold">
            <summary>
            Used to trigger FifoLevel interrupt.
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.FirmwareVersion">
            <summary>
            Get the RfmUsb firmware version
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.Frequency">
            <summary>
            Get or set the frequency
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.FrequencyDeviation">
            <summary>
            Get or set the frequency deviation
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.FskModulationShaping">
            <summary>
            The Fsk data shaping
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.InterPacketRxDelay">
            <summary>
            After PayloadReady occurred, defines the delay between FIFO empty and the
            start of a new RSSI phase for next packet. Must match the transmitter’s PA ramp-down time.
            - Tdelay = 0 if InterpacketRxDelay >= 12
            - Tdelay = (2^InterpacketRxDelay) / BitRate otherwise
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.LastRssi">
            <summary>
            Get the Rssi value after last packet received
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.LnaGainSelect">
            <summary>
            LNA gain setting
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.Mode">
            <summary>
            Get or set the current mode
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.ModulationType">
            <summary>
            Get or set the modulation type
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.NodeAddress">
            <summary>
            Node address used in address filtering
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.OcpEnable">
            <summary>
            Enables overload current protection (OCP) for the PA
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.OcpTrim">
            <summary>
            Trimming of OCP current
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.OokAverageThresholdFilter">
            <summary>
            Filter coefficients in average mode of the OOK demodulator
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.OokFixedThreshold">
            <summary>
            Fixed threshold value (in dB) in the OOK demodulator.
            Used when OokThresholdType is <see cref="F:RfmUsb.Net.OokThresholdType.Fixed"/>
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.OokModulationShaping">
            <summary>
            The Ook data shaping
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.OokPeakThresholdDec">
            <summary>
            Period of decrement of the RSSI threshold in the OOK demodulator
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.OokPeakThresholdStep">
            <summary>
            Size of each decrement of the RSSI threshold in the OOKdemodulator
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.OokThresholdType">
            <summary>
            Selects type of threshold in the OOK data slicer
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.PacketFormat">
            <summary>
            Defines the packet format used:
            </summary>
            <remarks>
            <para><see langword="false"/> Fixed length</para>
            <para><see langword="true"/> Variable length</para>
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm.PaRamp">
            <summary>
            Rise/Fall time of ramp up/down in FSK
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.PayloadLength">
            <summary>
            The payload length
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.PreambleSize">
            <summary>
            Size of the preamble to be sent (from TxStartConditionfulfilled)
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.RadioVersion">
            <summary>
            Get the RfmUsb radio version
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.Rssi">
            <summary>
            Absolute value of the RSSI in dBm, 0.5dB steps. RSSI = -RssiValue/2 [dBm
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.RxBw">
            <summary>
            Gets the Rx channel filter bandwidth
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.RxBwAfc">
            <summary>
            Gets the Rx channel filter bandwidth for Afc
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.SerialNumber">
            <summary>
            Get the mcu serial number
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.Stream">
            <summary>
            The <see cref="T:RfmUsb.Net.Io.RfmUsbStream"/>
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.Sync">
            <summary>
            The sync bytes
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.SyncEnable">
            <summary>
            Enable sync word generation and detection
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.SyncSize">
            <summary>
            The sync word size
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.Temperature">
            <summary>
            Measured temperature value
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.Timeout">
            <summary>
            Get or set the serial port timeout
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm.TxStartCondition">
            <summary>
            Defines the condition to start packet transmission
            </summary>
            <remarks>
            <para><see langword="false"/> FifoLevel (i.e. the number of bytes in the FIFO exceeds FifoThreshold)</para>
            <para><see langword="true"/> FifoNotEmpty (i.e. at least one byte in the FIFO)</para>
            </remarks>
        </member>
        <member name="M:RfmUsb.Net.IRfm.Close">
            <summary>
            Close the connection to the RfmUsb device
            </summary>
        </member>
        <member name="M:RfmUsb.Net.IRfm.EnterBootloader">
            <summary>
            Enter the device bootloader
            </summary>
        </member>
        <member name="M:RfmUsb.Net.IRfm.ExecuteReset">
            <summary>
            Reset the radio settings to default
            </summary>
        </member>
        <member name="M:RfmUsb.Net.IRfm.GetDioMapping(RfmUsb.Net.Dio)">
            <summary>
            Get the <see cref="T:RfmUsb.Net.Dio"/> mapping configuration <see cref="T:RfmUsb.Net.DioMapping"/>
            </summary>
            <param name="dio">The <see cref="T:RfmUsb.Net.Dio"/></param>
            <returns>The <see cref="T:RfmUsb.Net.DioMapping"/></returns>
        </member>
        <member name="M:RfmUsb.Net.IRfm.Open(System.String,System.Int32)">
            <summary>
            Open the RfmUsb device
            </summary>
            <param name="serialPort">The serial port</param>
            <param name="baudRate">The baud rate</param>
        </member>
        <member name="M:RfmUsb.Net.IRfm.RcCalibration">
            <summary>
            Triggers the calibration of the RC oscillator
            </summary>
        </member>
        <member name="M:RfmUsb.Net.IRfm.ReadFromBuffer(System.Int32)">
            <summary>
            Read the bytes from the buffer
            </summary>
            <param name="count">The number of bytes to read from the buffer</param>
            <returns>The <see cref="T:System.Collections.Generic.IList`1"/> </returns>
        </member>
        <member name="M:RfmUsb.Net.IRfm.SetDioMapping(RfmUsb.Net.Dio,RfmUsb.Net.DioMapping)">
            <summary>
            Set the <see cref="T:RfmUsb.Net.Dio"/> mapping configuration <see cref="T:RfmUsb.Net.DioMapping"/>
            </summary>
            <param name="dio">The <see cref="T:RfmUsb.Net.Dio"/> configuration</param>
            <param name="mapping">The <see cref="T:RfmUsb.Net.DioMapping"/></param>
        </member>
        <member name="M:RfmUsb.Net.IRfm.Transmit(System.Collections.Generic.IList{System.Byte})">
            <summary>
            Transmit a packet of data bytes
            </summary>
            <param name="data">The data to transmit</param>
        </member>
        <member name="M:RfmUsb.Net.IRfm.Transmit(System.Collections.Generic.IList{System.Byte},System.Int32)">
            <summary>
            Transmit a packet of data bytes
            </summary>
            <param name="data">The data to transmit</param>
            <param name="txCount">The number of transmissions</param>
        </member>
        <member name="M:RfmUsb.Net.IRfm.Transmit(System.Collections.Generic.IList{System.Byte},System.Int32,System.Int32)">
            <summary>
            Transmit a packet of data bytes
            </summary>
            <param name="data">The data to transmit</param>
            <param name="txCount">The number of transmissions</param>
            <param name="txInterval">The interval between transmissions</param>
        </member>
        <member name="M:RfmUsb.Net.IRfm.Transmit(System.Collections.Generic.IList{System.Byte},System.Int32,System.Int32,System.Int32)">
            <summary>
            Transmit a packet of data bytes
            </summary>
            <param name="data">The data to transmit</param>
            <param name="txCount">The number of transmissions</param>
            <param name="txInterval">The interval between transmissions</param>
            <param name="txTimeout">The tx timeout</param>
        </member>
        <member name="M:RfmUsb.Net.IRfm.TransmitBuffer">
            <summary>
            Transmit the IO buffer
            </summary>
        </member>
        <member name="M:RfmUsb.Net.IRfm.TransmitReceive(System.Collections.Generic.IList{System.Byte})">
            <summary>
            Transmit a packet of data bytes and wait for a response
            </summary>
            <param name="data">The data to transmit</param>
        </member>
        <member name="M:RfmUsb.Net.IRfm.TransmitReceive(System.Collections.Generic.IList{System.Byte},System.Int32)">
            <summary>
            Transmit a packet of data bytes and wait for a response
            </summary>
            <param name="data">The data to transmit</param>
            <param name="txTimeout">The timeout in milliseconds </param>
            <returns>The received packet bytes</returns>
        </member>
        <member name="M:RfmUsb.Net.IRfm.TransmitReceive(System.Collections.Generic.IList{System.Byte},System.Int32,System.Int32)">
            <summary>
            Transmit a packet of data bytes and wait for a response
            </summary>
            <param name="data">The data to transmit</param>
            <param name="txTimeout">The transmit timeout in milliseconds</param>
            <param name="rxTimeout">The receive timeout in milliseconds</param>
        </member>
        <member name="M:RfmUsb.Net.IRfm.WriteToBuffer(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Write a sequence of bytes to the IO buffer
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="T:RfmUsb.Net.IRfm69">
            <summary>
            An rfm6x device
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm69.AesOn">
            <summary>
            Enable the AES encryption/decryption:
            </summary>
            <remarks>
            <para><see langword="false"/> Off</para>
            <para><see langword="true"/> On (payload limited to 66 bytes maximum)</para>
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm69.AfcLowBetaOn">
            <summary>
            Improved AFC routine for signals with modulation index lower than 2.
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm69.AutoModeEnterCondition">
            <summary>
            Interrupt condition for entering the intermediate mode
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm69.AutoModeExitCondition">
            <summary>
            Interrupt condition for exiting the intermediate mode
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm69.AutoRxRestartOn">
            <summary>
            Enables automatic Rx restart (RSSI phase) after PayloadReady occurred and packet has been completely read from FIFO:
            </summary>
            <remarks>
            <para><see langword="false"/> Off. RestartRx can be used.</para>
            <para><see langword="true"/> On. Rx automatically restarted after InterPacketRxDelay.</para>
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm69.ContinuousDagc">
            <summary>
            Fading Margin Improvement
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm69.CurrentLnaGain">
            <summary>
            Current LNA gain, set either manually, or by the AGC
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm69.DataMode">
            <summary>
            The data processing mode
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm69.DccFreq">
            <summary>
            Cut-off frequency of the DC offset canceller (DCC)
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm69.DccFreqAfc">
            <summary>
            Cut-off frequency of the DC offset canceller (DCC)
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm69.FifoFill">
            <summary>
            FIFO filling condition:
            </summary>
            <remarks>
            <para><see langword="false"/> If SyncAddress interrupt occurs</para>
            <para><see langword="true"/> As long as FifoFillCondition is set</para>
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm69.Impedance">
            <summary>
            LNA’s input impedance
            </summary>
            <remarks>
            <para><see langword="false"/> 50 ohms</para>
            <para><see langword="true"/> 200 ohms</para>
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm69.IntermediateMode">
            <summary>
            Intermediate mode
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm69.IrqFlags">
            <summary>
            Get or set the Irq flags
            </summary>
            <remarks>
            Setting a specific flag clears the corresponding irq
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm69.ListenCoefficientIdle">
            <summary>
            Duration of the Idle phase in Listen mode
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm69.ListenCoefficientRx">
            <summary>
            Duration of the Idle phase in Rx phase
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm69.ListenCriteria">
            <summary>
            Criteria for packet acceptance in Listen mode:
            </summary>
            <remarks>
            <para><see langword="false"/> Signal strength is above RssiThreshold</para>
            <para><see langword="true"/> Signal strength is above RssiThreshold and SyncAddress matched</para>
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm69.ListenEnd">
            <summary>
            Action taken after acceptance of a packet in Listen mode
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm69.ListenerOn">
            <summary>
            Enables Listen mode, should be enabled whilst in Standby mode
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm69.ListenResolutionIdle">
            <summary>
            The resolution of Listen mode Idle time
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm69.ListenResolutionRx">
            <summary>
            The resolution of Listen mode Rx time
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm69.LowBetaAfcOffset">
            <summary>
            AFC offset set for low modulation index systems, used if AfcLowBetaOn = true.
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm69.OutputPower">
            <summary>
            Get or set the output power in dbm
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm69.RssiThreshold">
            <summary>
            RSSI trigger level for Rssi interrupt
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm69.SensitivityBoost">
            <summary>
            High sensitivity or normal sensitivity mode
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm69.Sequencer">
            <summary>
            Get or set the automatic Sequencer enable
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm69.SyncBitErrors">
            <summary>
            Get or set the number of tolerated bit errors in Sync word
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm69.TimeoutRssiThreshold">
            <summary>
            Timeout interrupt is generated TimeoutRxStart*16*Tbit after switching to Rx mode
            if Rssi interrupt doesn't occur(i.e. RssiValue > RssiThreshold)
            0x00: TimeoutRxStart is disabled
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm69.TimeoutRxStart">
            <summary>
            Timeout interrupt is generated TimeoutRxStart*16*Tbit after switching to Rx mode
            if Rssi interrupt doesn't occur(i.e. RssiValue > RssiThreshold)
            0x00: TimeoutRxStart is disabled
            </summary>
        </member>
        <member name="M:RfmUsb.Net.IRfm69.ExecuteAfcClear">
            <summary>
            Clears the AfcValue if set in Rx mode
            </summary>
        </member>
        <member name="M:RfmUsb.Net.IRfm69.ExecuteAfcStart">
            <summary>
            Triggers an AFC
            </summary>
        </member>
        <member name="M:RfmUsb.Net.IRfm69.ExecuteFeiStart">
            <summary>
            Triggers a FEI measurement
            </summary>
        </member>
        <member name="M:RfmUsb.Net.IRfm69.ExecuteListenModeAbort(RfmUsb.Net.Mode)">
            <summary>
            Abort listen mode
            </summary>
            <param name="mode">The <see cref="T:RfmUsb.Net.Mode"/> to transition to after abort</param>
        </member>
        <member name="M:RfmUsb.Net.IRfm69.ExecuteMeasureTemperature">
            <summary>
            Execute a temperature measurement
            </summary>
        </member>
        <member name="M:RfmUsb.Net.IRfm69.ExecuteRestartRx">
            <summary>
            Forces the Receiver in WAIT mode, in Continuous Rx mode.
            </summary>
        </member>
        <member name="M:RfmUsb.Net.IRfm69.ExecuteStartRssi">
            <summary>
            Trigger a RSSI measurement
            </summary>
        </member>
        <member name="M:RfmUsb.Net.IRfm69.SetAesKey(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Set the AES encryption key
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:RfmUsb.Net.IRfm9x">
            <summary>
            An rfm9x device
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.AccessSharedRegisters">
            <summary>
            This bit operates when device is in Lora mode; if set it allows
            access to FSK registers page located in address space
            (0x0D:0x3F) while in LoRa mode
            </summary>
            <remarks>
            <para><see langword="false"/> Access LoRa registers</para>
            <para><see langword="true"/> Access FSK registers</para>
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.AgcAutoOn">
            <summary>
            The agc value
            </summary>
            <remarks>
            <para><see langword="false"/> LNA gain set by register LnaGain</para>
            <para><see langword="true"/> LNA gain set by the internal AGC loop</para>
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.AutoImageCalibrationOn">
            <summary>
            Controls the Image calibration mechanism
            </summary>
            <remarks>
            <para><see langword="false"/> Calibration of the receiver depending on the temperature is disabled</para>
            <para><see langword="true"/> Calibration of the receiver depending on the temperature enabled</para>
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.AutoRestartRxMode">
            <summary>
            Controls the automatic restart of the receiver after the reception of
            a valid packet(PayloadReady or CrcOk)
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.BeaconOn">
            <summary>
            Enables the Beacon mode in Fixed packetformat
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.BitRateFractional">
            <summary>
            Fractional part of the bit rate divider (Only valid for FSK)
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.BitSyncOn">
            <summary>
            Enables the Bit Synchronizer.
            </summary>
            <remarks>
            <para><see langword="false"/> Bit Sync disabled (not possible in Packet mode)</para>
            <para><see langword="true"/> Bit Sync enabled</para>
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.CrcWhiteningType">
            <summary>
            Selects the CRC and whitening algorithms
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.ErrorCodingRate">
            <summary>
            The Error coding rate
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.FastHopOn">
            <summary>
            Bypasses the main state machine for a quick frequency hop.
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.FifoAddressPointer">
            <summary>
            The fifo address pointer
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.FifoRxBaseAddress">
            <summary>
            Read base address in FIFO data buffer for RX
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.FifoRxByteAddressPointer">
            <summary>
            Current value of RX databuffer pointer
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.FifoRxBytesNumber">
            <summary>
            Number of payload bytes of latest packet received
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.FifoRxCurrentAddress">
            <summary>
            Start address (in data buffer) of last packet received
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.FifoTxBaseAddress">
            <summary>
            Write base address in FIFO data buffer for TX
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.FormerTemperature">
            <summary>
            The Temperature saved during the latest IQ (RSSI and Image) calibration
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.FrequencyError">
            <summary>
            Estimated frequency error from modem
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.FrequencyHoppingPeriod">
            <summary>
            Symbol periods between frequency hops. (0 = disabled).
            1st hop always happen after the 1st header symbol
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.FromIdle">
            <summary>
            Controls the sequencer transition from the
            idle state on a T1 interrupt.
            </summary>
            <remarks>
            <para><see langword="false"/> To transmit state</para>
            <para><see langword="false"/> To receive state</para>
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.FromPacketReceived">
            <summary>
            Controls the state-machine transition from the PacketReceived state
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.FromReceive">
            <summary>
            Controls the Sequencer transition from the Receivestate
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.FromRxTimeout">
            <summary>
            Controls the state-machine transition from the
            Receive state on a RxTimeout interrupt
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.FromStart">
            <summary>
            Controls the sequencer transition when sequencer
            is a set to true in sleep or standby mode
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.FromTransmit">
            <summary>
            Controls the sequencer transition from the transmit state
            </summary>
            <remarks>
            <para><see langword="false"/> To lowpowerselection on a packetsent interrupt</para>
            <para><see langword="true"/> To receive state on a packetsent interrupt</para>
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.HopChannel">
            <summary>
            FHSS channel information
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.IdleMode">
            <summary>
            Selects the chip mode during the state.
            </summary>
            <remarks>
            <para><see langword="false"/> standby mode</para>
            <para><see langword="true"/> sleep mode</para>
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.ImplicitHeaderModeOn">
            <summary>
            The implicit header mode
            </summary>
            <remarks>
            <para><see langword="false"/> explicit header mode</para>
            <para><see langword="true"/> implicit header mode</para>
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.IoHomeOn">
            <summary>
            Enables the io-homecontrol compatibility mode
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.IoHomePowerFrame">
            <summary>
            Linked to io-homecontrol compatibility mode
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.IrqFlags">
            <summary>
            Get or set the Irq flags
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.LastPacketSnr">
            <summary>
            Estimation of SNR on last packet received.
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.LnaBoostHf">
            <summary>
            Enable Low Frequency (RFI_LF) LNA current adjustment
            </summary>
            <remarks>
            <para><see langword="false"/> Default LNA current</para>
            <para><see langword="true"/> Boost on, 150% LNA current</para>
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.LongRangeMode">
            <summary>
            Switch the device to long range mode
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.LoraAgcAutoOn">
            <summary>
            Enable agc auto on
            </summary>
            <remarks>
            <para><see langword="false"/> LNA gain set by register LnaGain</para>
            <para><see langword="true"/> LNA gain set by the internal AGC loop</para>
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.LoraIrqFlags">
            <summary>
            Get the lora Irq flags
            </summary>
            <remarks>
            Setting a specific flag clears the corresponding irq
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.LoraIrqFlagsMask">
            <summary>
            Irq flag mask
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.LoraMode">
            <summary>
            Get the lora mode
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.LoraPayloadLength">
            <summary>
            Payload length in bytes.
            </summary>
            <remarks>
            The register needs to be set in implicit header
            mode for the expected packet length. A 0 value is not permitted
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.LowBatteryOn">
            <summary>
            Low Battery detector enable signa
            </summary>
            <remarks>
            <para><see langword="false"/> LowBat detector disabled</para>
            <para><see langword="true"/> LowBat detector enabled</para>
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.LowBatteryTrim">
            <summary>
            Trimming of the LowBat threshold
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.LowDataRateOptimize">
            <summary>
            Low data rate optimize
            </summary>
            <remarks>
            <para><see langword="false"/> Disabled</para>
            <para><see langword="true"/> Enabled; mandated for when the symbol length exceeds 16ms</para>
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.LowFrequencyMode">
            <summary>
            Access Low Frequency Mode registers
            </summary>
            <remarks>
            <para><see langword="false"/> High Frequency Mode (access to HF test registers)</para>
            <para><see langword="true"/> Low Frequency Mode(access to LF test registers)</para>
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.LowPowerSelection">
            <summary>
            Selects Sequencer LowPower state after a to LowPowerSelection transition
            </summary>
            <remarks>
            <para><see langword="false"/> SequencerOff state with chip on Initial mode</para>
            <para><see langword="true"/> Idle state with chip on Standby or Sleep mode depending on IdleMode</para>
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.MapPreambleDetect">
            <summary>
            Allows the mapping of either Rssi Or PreambleDetect to the DIO pins
            </summary>
            <remarks>
            <para><see langword="false"/> Rssi interrupt</para>
            <para><see langword="true"/> PreambleDetect interrupt</para>
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.ModemBandwidth">
            <summary>
            The lora modem bandwidth
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.ModemStatus">
            <summary>
            The modem status
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.OokAverageOffset">
            <summary>
            Static offset added to the threshold in average mode in order to reduce glitching activity (OOK only)
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.OutputPower">
            <summary>
            Get or set the output power in dbm
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.PacketRssi">
            <summary>
            RSSI of the latest packet received (dBm)
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.PayloadMaxLength">
            <summary>
            Maximum payload length; if header payload length exceeds value a
            header CRC error is generated.Allows filtering of packet with a bad size.
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.PpmCorrection">
            <summary>
            Data rate offset value, used in conjunction with AFC
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.PreambleDetectorOn">
            <summary>
            Enables Preamble detector when set to 1. The AGC settings
            supersede this bit during the startup / AGC phase.
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.PreambleDetectorSize">
            <summary>
            Number of Preamble bytes to detect to trigger an interrupt
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.PreambleDetectorTolerance">
            <summary>
            Number or chip errors tolerated overPreambleDetectorSize. 4 chips per bit
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.PreambleLength">
            <summary>
            The lora Preamble length
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.PreamblePolarity">
            <summary>
            Sets the polarity of the Preamble
            </summary>
            <remarks>
            <para><see langword="false"/> 0xAA (default)</para>
            <para><see langword="true"/> 0x55</para>
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.RestartRxOnCollision">
            <summary>
            Turns on the mechanism restarting the receiver
            automatically if it gets saturated or a packet
            collision is detected
            </summary>
            <remarks>
            <para><see langword="false"/> No automatic Restart</para>
            <para><see langword="true"/> Automatic restart On</para>
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.RssiCollisionThreshold">
            <summary>
            Sets the threshold used to consider that an interferer is detected,
            witnessing a packet collision. 1dB/LSB
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.RssiOffset">
            <summary>
            Signed RSSI offset, to compensate for the possible losses/gains in the front-end
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.RssiSmoothing">
            <summary>
            Defines the number of samples taken to average the RSSI result
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.RssiThreshold">
            <summary>
            RSSI trigger level for the Rssi interrupt
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.RssiWideband">
            <summary>
            Wideband RSSI measurement used to locally generate
            a random number
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.RxCodingRate">
            <summary>
            Coding rate of last header received
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.RxPayloadCrcOn">
            <summary>
            Enable CRC generation and check on payload
            <para><see langword="false"/> CRC disable</para>
            <para><see langword="true"/> CRC enable</para>
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.SpreadingFactor">
            <summary>
            The spreading factor rate
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.SymbolTimeout">
            <summary>
            RX symbol timeout
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.TcxoInputOn">
            <summary>
            Controls the crystal oscillator
            </summary>
            <remarks>
            <para><see langword="false"/> Crystal Oscillator with external Crystal</para>
            <para><see langword="true"/> External clipped sine TCXO AC-connected to XTA pin</para>
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.TemperatureChange">
            <summary>
            IRQ flag witnessing a temperature change exceeding
            TempThreshold since the last Image and RSSI calibration:
            <remarks>
            <para><see langword="false"/> Temperature change lower than TempThreshold</para>
            <para><see langword="true"/> Temperature change greater than TempThreshold</para>
            </remarks>
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.TemperatureThreshold">
            <summary>
            Temperature change threshold to trigger a new I/Q calibration
            </summary>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.TempMonitorOff">
            <summary>
            Controls the temperature monitoring
            </summary>
            <remarks>
            <para><see langword="false"/> Temperature monitoring done in all modes except Sleep and Standby</para>
            <para><see langword="true"/> Temperature monitoring stopped</para>
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.TimeoutRxPreamble">
            <summary>
            Timeout interrupt is generated TimeoutRxPreamble*16*Tbit after
            switching to Rx mode if Preamble interrupt doesn’t occur
            </summary>
            <remarks>
            0 Disabled
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.TimeoutRxRssi">
            <summary>
            Timeout interrupt is generated TimeoutRxRssi*16*Tbit after
            switching to Rx mode if Rssi interrupt doesn’t occur
            (i.e. RssiValue > RssiThreshold)
            </summary>
            <remarks>
            0 Disabled
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.TimeoutSignalSync">
            <summary>
            Timeout interrupt is generated TimeoutSignalSync*16*Tbit after
            the Rx mode is programmed, if SyncAddress doesn’t occur
            </summary>
            <remarks>
            0 Disabled
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.TxContinuousMode">
            <summary>
            Tx continous mode
            </summary>
            <remarks>
            <para><see langword="false"/> Normal mode, a single packet is sent</para>
            <para><see langword="true"/> Continuous mode, send multiple packets across the FIFO</para>
            (used for spectral analysis)
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.ValidHeaderCount">
            <summary>
            Number of valid headers received since last transition into Rx mode
            </summary>
            <remarks>
            Header and packet counters are reset in Sleep mode.
            </remarks>
        </member>
        <member name="P:RfmUsb.Net.IRfm9x.ValidPacketCount">
            <summary>
            Number of valid headers received since last transition into Rx mode
            </summary>
            <remarks>
            Header and packet counters are reset in Sleep mode.
            </remarks>
        </member>
        <member name="M:RfmUsb.Net.IRfm9x.ExecuteAgcStart">
            <summary>
            Start an AGC sequence
            </summary>
        </member>
        <member name="M:RfmUsb.Net.IRfm9x.ExecuteImageCalibration">
            <summary>
            Triggers the IQ and RSSI calibration when set in Standby mode
            </summary>
        </member>
        <member name="M:RfmUsb.Net.IRfm9x.ExecuteRestartRxWithoutPllLock">
            <summary>
            Triggers a manual Restart of the Receiver chain.
            Use this when there is no frequency change,
            <see cref="M:RfmUsb.Net.IRfm9x.ExecuteRestartRxWithPllLock"/> otherwise
            </summary>
        </member>
        <member name="M:RfmUsb.Net.IRfm9x.ExecuteRestartRxWithPllLock">
            <summary>
            Triggers a manual Restart of the Receiver chain.
            Use this when there is a frequency change,
            requiring some time for the PLL to re-lock.
            </summary>
        </member>
        <member name="M:RfmUsb.Net.IRfm9x.ExecuteSequencerStart">
            <summary>
            Execute the sequencer start condition.
            </summary>
            <remarks>
            the sequencer can only be enabled when the chip is in sleep or standby mode
            </remarks>
        </member>
        <member name="M:RfmUsb.Net.IRfm9x.ExecuteSequencerStop">
            <summary>
            Forces the sequencer to stop
            </summary>
        </member>
        <member name="M:RfmUsb.Net.IRfm9x.GetTimerCoefficient(RfmUsb.Net.Timer)">
            <summary>
            Get the timer coefficent
            </summary>
            <param name="timer">The timer to read</param>
            <returns>The coefficent</returns>
        </member>
        <member name="M:RfmUsb.Net.IRfm9x.GetTimerResolution(RfmUsb.Net.Timer)">
            <summary>
            Get the timer resolution
            </summary>
            <param name="timer">The timer to read</param>
            <returns>The <see cref="T:RfmUsb.Net.TimerResolution"/></returns>
        </member>
        <member name="M:RfmUsb.Net.IRfm9x.SetTimerCoefficient(RfmUsb.Net.Timer,System.Byte)">
            <summary>
            Set the timer coefficent
            </summary>
            <param name="timer">The <see cref="T:RfmUsb.Net.Timer"/> to read</param>
            <param name="value">value to set</param>
        </member>
        <member name="M:RfmUsb.Net.IRfm9x.SetTimerResolution(RfmUsb.Net.Timer,RfmUsb.Net.TimerResolution)">
            <summary>
            Set the timer resolution
            </summary>
            <param name="timer">The <see cref="T:RfmUsb.Net.Timer"/> to read</param>
            <param name="value">The <see cref="T:RfmUsb.Net.TimerResolution"/> value to set</param>
        </member>
        <member name="T:RfmUsb.Net.ListenEnd">
            <summary>
            Action taken after acceptance of a packet in Listen mode
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ListenEnd.Rx">
            <summary>
            Chip stays in Rx mode. Listen mode stops and must be disabled.
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ListenEnd.Mode">
            <summary>
            chip stays in Rx mode until PayloadReady orTimeout interrupt occurs. It then goes to the mode defined by Mode.
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ListenEnd.Idle">
            <summary>
            chip stays in Rx mode until PayloadReady or Timeout interrupt occurs. Listen mode then resumes in Idle state.
            FIFO content is lost at next Rx wakeup.
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ListenEnd.Reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="T:RfmUsb.Net.ListenResolution">
            <summary>
            Resolution of Listen mode Idle time
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ListenResolution.Reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ListenResolution.Idle64us">
            <summary>
            64 us
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ListenResolution.Idle4_1ms">
            <summary>
            4.1 ms
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ListenResolution.Idle262ms">
            <summary>
            262 ms
            </summary>
        </member>
        <member name="T:RfmUsb.Net.LnaGain">
            <summary>
            LNA gain setting
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LnaGain.Auto">
            <summary>
            Auto
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LnaGain.Max">
            <summary>
            Max
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LnaGain.MaxMinus6db">
            <summary>
            Max - 6db
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LnaGain.MaxMinus12db">
            <summary>
            Max - 12db
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LnaGain.MaxMinus24db">
            <summary>
            Max - 12db
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LnaGain.MaxMinus36db">
            <summary>
            Max - 36db
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LnaGain.MaxMinus48db">
            <summary>
            Max - 48db
            </summary>
        </member>
        <member name="T:RfmUsb.Net.LoraIrqFlags">
            <summary>
            The lora Irq flags
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LoraIrqFlags.None">
            <summary>
            No flags set
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LoraIrqFlags.CadDetected">
            <summary>
            Valid Lora signal detected during CAD operation
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LoraIrqFlags.FhssChangeChannel">
            <summary>
            FHSS change channel interrupt
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LoraIrqFlags.CadDone">
            <summary>
            CAD complete
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LoraIrqFlags.TxDone">
            <summary>
            FIFO Payload transmission complete interrupt
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LoraIrqFlags.ValidHeader">
            <summary>
            Valid header received in Rx
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LoraIrqFlags.PayloadCrcError">
            <summary>
            Payload CRC error interrupt
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LoraIrqFlags.RxDone">
            <summary>
            Packet reception complete interrupt
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LoraIrqFlags.RxTimeout">
            <summary>
            Timeout interrupt
            </summary>
        </member>
        <member name="T:RfmUsb.Net.LoraIrqFlagsMask">
            <summary>
            THe lora irq flags mask
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LoraIrqFlagsMask.None">
            <summary>
            No irq mask flags are set
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LoraIrqFlagsMask.CadDetectedMask">
            <summary>
            Cad Detected Interrupt Mask: setting this bit masks the corresponding IRQ in RegIrqFlags
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LoraIrqFlagsMask.FhssChangeChannelMask">
            <summary>
            FHSS change channel interrupt mask: setting this bit masks the corresponding IRQ in RegIrqFlags
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LoraIrqFlagsMask.CadDoneMask">
            <summary>
            CAD complete interrupt mask: setting this bit masks the corresponding IRQ in RegIrqFlags
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LoraIrqFlagsMask.TxDoneMask">
            <summary>
            FIFO Payload transmission complete interrupt mask: setting this bit Masks the corresponding IRQ in RegIrqFlags
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LoraIrqFlagsMask.ValidHeaderMask">
            <summary>
            Valid header received in Rx Mask: setting this bit masks the corresponding IRQ in RegIrqFlags
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LoraIrqFlagsMask.PayloadCrcErrorMask">
            <summary>
            Payload CRC error interrupt Mask: setting this bit masks the  corresponding IRQ in RegIrqFlags
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LoraIrqFlagsMask.RxDoneMask">
            <summary>
            Packet reception complete interrupt Mask: setting this bit masks the corresponding IRQ in RegIrqFlags
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LoraIrqFlagsMask.RxTimeoutMask">
            <summary>
            Timeout interrupt Mask: setting this bit masks the corresponding IRQ in RegIrqFlags
            </summary>
        </member>
        <member name="T:RfmUsb.Net.LoraMode">
            <summary>
            The lora mode
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LoraMode.Sleep">
            <summary>
            Sleep Mode (SLEEP)
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LoraMode.Standby">
            <summary>
            Standby Mode (STDBY)
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LoraMode.SynthTx">
            <summary>
            Frequency synthesis TX (FSTX)
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LoraMode.Tx">
            <summary>
            Transmit (TX)
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LoraMode.SynthRx">
            <summary>
            Frequency synthesis RX (FSRX)
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LoraMode.RxContinuous">
            <summary>
            Receive continuous (RXCONTINUOUS)
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LoraMode.RxSingle">
            <summary>
            Receive single (RXSINGLE)
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LoraMode.Cad">
            <summary>
            Channel activity detection (CAD)
            </summary>
        </member>
        <member name="T:RfmUsb.Net.LowBatteryTrim">
            <summary>
            Trimming of the LowBat threshold
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LowBatteryTrim.Volts1_695">
            <summary>
            1.695 Volts
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LowBatteryTrim.Volts1_764">
            <summary>
            1.764 Volts
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LowBatteryTrim.Volts1_835">
            <summary>
            1.835 Volts
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LowBatteryTrim.Volts1_905">
            <summary>
            1.985 Volts
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LowBatteryTrim.Volts1_976">
            <summary>
            1.976 Volts
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LowBatteryTrim.Volts2_045">
            <summary>
            2.045 Volts
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LowBatteryTrim.Volts2_116">
            <summary>
            2.116 Volts
            </summary>
        </member>
        <member name="F:RfmUsb.Net.LowBatteryTrim.Volts2_185">
            <summary>
            2.185 Volts
            </summary>
        </member>
        <member name="T:RfmUsb.Net.Mode">
            <summary>
            Transceiver’s operating modes
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Mode.Sleep">
            <summary>
            Sleep Mode (SLEEP)
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Mode.Standby">
            <summary>
            Standby Mode (STDBY)
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Mode.Synth">
            <summary>
            Frequency Synthesizer mode (FS)
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Mode.Tx">
            <summary>
            Transmitter mode (TX)
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Mode.Rx">
            <summary>
            Receiver mode (RX)
            </summary>
        </member>
        <member name="T:RfmUsb.Net.ModemBandwidth">
            <summary>
            The lora modem bandwidth
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ModemBandwidth.Bandwidth7_8KHZ">
            <summary>
            7.8 kHz Bandwidth
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ModemBandwidth.Bandwidth10_4KHZ">
            <summary>
            10.4 kHz Bandwidth
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ModemBandwidth.Bandwidth15_6KHZ">
            <summary>
            15.6 kHz Bandwidth
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ModemBandwidth.Bandwidth20_8KHZ">
            <summary>
            20.8kHz Bandwidth
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ModemBandwidth.Bandwidth31_25KHZ">
            <summary>
            31.25 kHz Bandwidth
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ModemBandwidth.Bandwidth41_7KHZ">
            <summary>
            41.7 kHz Bandwidth
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ModemBandwidth.Bandwidth62_5KHZ">
            <summary>
            62.5 kHz Bandwidth
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ModemBandwidth.Bandwidth125KHZ">
            <summary>
            125 kHz Bandwidth
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ModemBandwidth.Bandwidth250KHZ">
            <summary>
            250 kHz Bandwidth
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ModemBandwidth.Bandwidth500KHZ">
            <summary>
            500 KHz Bandwidth
            </summary>
        </member>
        <member name="T:RfmUsb.Net.ModemStatus">
            <summary>
            The modem status
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ModemStatus.None">
            <summary>
            No <see cref="T:RfmUsb.Net.ModemStatus"/> bit is set
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ModemStatus.SignalDetected">
            <summary>
            Signal Detected
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ModemStatus.SignalSynchronized">
            <summary>
            Signal Synchronized
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ModemStatus.RxOnGoing">
            <summary>
            Rx Ongoing
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ModemStatus.HeaderInfoValid">
            <summary>
            Header Info Valid
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ModemStatus.ModemClear">
            <summary>
            Modem Clear
            </summary>
        </member>
        <member name="T:RfmUsb.Net.ModulationType">
            <summary>
            Modulation scheme
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ModulationType.Fsk">
            <summary>
            Fsk modulation
            </summary>
        </member>
        <member name="F:RfmUsb.Net.ModulationType.Ook">
            <summary>
            Ook modulation
            </summary>
        </member>
        <member name="T:RfmUsb.Net.OcpTrim">
            <summary>
            Trimming of OCP current
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OcpTrim.OcpTrim45">
            <summary>
            45ma
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OcpTrim.OcpTrim50">
            <summary>
            50 ma
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OcpTrim.OcpTrim55">
            <summary>
            55 ma
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OcpTrim.OcpTrim60">
            <summary>
            60 ma
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OcpTrim.OcpTrim65">
            <summary>
            65 ma
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OcpTrim.OcpTrim70">
            <summary>
            70 ma
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OcpTrim.OcpTrim75">
            <summary>
            75 ma
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OcpTrim.OcpTrim80">
            <summary>
            80 ma
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OcpTrim.OcpTrim85">
            <summary>
            85 ma
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OcpTrim.OcpTrim90">
            <summary>
            90 ma
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OcpTrim.OcpTrim95">
            <summary>
            95 ma
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OcpTrim.OcpTrim100">
            <summary>
            100 ma
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OcpTrim.OcpTrim105">
            <summary>
            105 ma
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OcpTrim.OcpTrim110">
            <summary>
            110 ma
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OcpTrim.OcpTrim115">
            <summary>
            115 ma
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OcpTrim.OcpTrim120">
            <summary>
            120 ma
            </summary>
        </member>
        <member name="T:RfmUsb.Net.OokAverageOffset">
            <summary>
            The ook average offset
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokAverageOffset.Offset0dB">
            <summary>
            0dB Offset
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokAverageOffset.Offset2dB">
            <summary>
            2 dB Offset
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokAverageOffset.Offset4dB">
            <summary>
            4 dB Offset
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokAverageOffset.Offset6dB">
            <summary>
            6 dB Offset
            </summary>
        </member>
        <member name="T:RfmUsb.Net.OokAverageThresholdFilter">
            <summary>
            Filter coefficients in average mode of the OOK demodulator
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokAverageThresholdFilter.ChipRate32">
            <summary>
            Chip rate / 32.π
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokAverageThresholdFilter.ChipRate8">
            <summary>
            Chip rate / 8.π
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokAverageThresholdFilter.ChipRate4">
            <summary>
            Chip rate / 4.π
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokAverageThresholdFilter.ChipRate2">
            <summary>
            Chip rate / 2.π
            </summary>
        </member>
        <member name="T:RfmUsb.Net.OokModulationShaping">
            <summary>
            The Ook modulation shapping
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokModulationShaping.None">
            <summary>
            No Shaping
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokModulationShaping.FilteringBr">
            <summary>
            filtering with fcutoff = BR
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokModulationShaping.Filtering2Br">
            <summary>
            filtering with fcutoff = 2*BR
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokModulationShaping.Reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="T:RfmUsb.Net.OokThresholdDec">
            <summary>
            Period of decrement of the RSSI threshold in the OOK demodulator
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokThresholdDec.OncePerChip">
            <summary>
            Once every chip
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokThresholdDec.OnceEvery2Chips">
            <summary>
            Once every 2 chips
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokThresholdDec.OnceEvery4Chips">
            <summary>
            Once every 4 chips
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokThresholdDec.OnceEvery8Chips">
            <summary>
            Once every 8 chips
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokThresholdDec.TwiceInEachChip">
            <summary>
            2 times in each chip
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokThresholdDec.FourTimesInEachChip">
            <summary>
            4 times in each chip
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokThresholdDec.EightTimesInEachChip">
            <summary>
            8 times in each chip
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokThresholdDec.SixteeenTimesInEachChip">
            <summary>
            16 times in each chip
            </summary>
        </member>
        <member name="T:RfmUsb.Net.OokThresholdStep">
            <summary>
            Size of each decrement of the RSSI threshold in the OOKdemodulator
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokThresholdStep.Step0_5db">
            <summary>
            0.5 db
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokThresholdStep.Step1db">
            <summary>
            1 db
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokThresholdStep.Step1_5db">
            <summary>
            1.5 db
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokThresholdStep.Step2db">
            <summary>
            2 db
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokThresholdStep.Step3db">
            <summary>
            3 db
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokThresholdStep.Step4db">
            <summary>
            4 db
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokThresholdStep.Step5db">
            <summary>
            5 db
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokThresholdStep.Step6db">
            <summary>
            6 db
            </summary>
        </member>
        <member name="T:RfmUsb.Net.OokThresholdType">
            <summary>
            Selects type of threshold in the OOK data slicer
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokThresholdType.Fixed">
            <summary>
            Fixed
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokThresholdType.Peak">
            <summary>
            Peak
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokThresholdType.Average">
            <summary>
            Average
            </summary>
        </member>
        <member name="F:RfmUsb.Net.OokThresholdType.Reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="T:RfmUsb.Net.PaRamp">
            <summary>
            Rise/Fall time of ramp up/down in FSK
            </summary>
        </member>
        <member name="F:RfmUsb.Net.PaRamp.PowerAmpRamp3400">
            <summary>
            3.4 ms
            </summary>
        </member>
        <member name="F:RfmUsb.Net.PaRamp.PowerAmpRamp2000">
            <summary>
            2 ms
            </summary>
        </member>
        <member name="F:RfmUsb.Net.PaRamp.PowerAmpRamp1000">
            <summary>
            1 us
            </summary>
        </member>
        <member name="F:RfmUsb.Net.PaRamp.PowerAmpRamp500">
            <summary>
            500 us
            </summary>
        </member>
        <member name="F:RfmUsb.Net.PaRamp.PowerAmpRamp250">
            <summary>
            250 us
            </summary>
        </member>
        <member name="F:RfmUsb.Net.PaRamp.PowerAmpRamp125">
            <summary>
            125 us
            </summary>
        </member>
        <member name="F:RfmUsb.Net.PaRamp.PowerAmpRamp100">
            <summary>
            100 us
            </summary>
        </member>
        <member name="F:RfmUsb.Net.PaRamp.PowerAmpRamp62">
            <summary>
            62 us
            </summary>
        </member>
        <member name="F:RfmUsb.Net.PaRamp.PowerAmpRamp50">
            <summary>
            50 us
            </summary>
        </member>
        <member name="F:RfmUsb.Net.PaRamp.PowerAmpRamp40">
            <summary>
            40 us
            </summary>
        </member>
        <member name="F:RfmUsb.Net.PaRamp.PowerAmpRamp31">
            <summary>
            31 us
            </summary>
        </member>
        <member name="F:RfmUsb.Net.PaRamp.PowerAmpRamp25">
            <summary>
            25 us
            </summary>
        </member>
        <member name="F:RfmUsb.Net.PaRamp.PowerAmpRamp20">
            <summary>
            20 us
            </summary>
        </member>
        <member name="F:RfmUsb.Net.PaRamp.PowerAmpRamp15">
            <summary>
            15 us
            </summary>
        </member>
        <member name="F:RfmUsb.Net.PaRamp.PowerAmpRamp12">
            <summary>
            12 us
            </summary>
        </member>
        <member name="F:RfmUsb.Net.PaRamp.PowerAmpRamp10">
            <summary>
            10 us
            </summary>
        </member>
        <member name="T:RfmUsb.Net.Ports.ISerialPort">
            <summary>
            Defines a serial port interface
            </summary>
        </member>
        <member name="P:RfmUsb.Net.Ports.ISerialPort.Handshake">
            <summary>
            Gets or sets the handshaking protocol for serial port transmission of data using a value from System.IO.Ports.Handshake.
            </summary>
        </member>
        <member name="P:RfmUsb.Net.Ports.ISerialPort.Encoding">
            <summary>
            Gets or sets the byte encoding for pre- and post-transmission conversion of text.
            </summary>
        </member>
        <member name="P:RfmUsb.Net.Ports.ISerialPort.DtrEnable">
            <summary>
            Gets or sets a value that enables the Data Terminal Ready (DTR) signal during serial communication.
            </summary>
        </member>
        <member name="P:RfmUsb.Net.Ports.ISerialPort.CtsHolding">
            <summary>
            Gets the state of the Clear-to-Send line.
            </summary>
        </member>
        <member name="P:RfmUsb.Net.Ports.ISerialPort.DiscardNull">
            <summary>
            Gets or sets a value indicating whether null bytes are ignored when transmitted between the port and the receive buffer.
            </summary>
        </member>
        <member name="P:RfmUsb.Net.Ports.ISerialPort.DataBits">
            <summary>
            Gets or sets the standard length of data bits per byte.
            </summary>
        </member>
        <member name="P:RfmUsb.Net.Ports.ISerialPort.IsOpen">
            <summary>
            Gets a value indicating the open or closed status of the <see cref="T:RfmUsb.Net.Ports.ISerialPort"/> object.
            </summary>
        </member>
        <member name="P:RfmUsb.Net.Ports.ISerialPort.DsrHolding">
            <summary>
            Gets the state of the Data Set Ready (DSR) signal.
            </summary>
        </member>
        <member name="P:RfmUsb.Net.Ports.ISerialPort.NewLine">
            <summary>
            Gets or sets the value used to interpret the end of a call to the <see cref="T:RfmUsb.Net.Ports.ISerialPort"/>.ReadLine
            and <see cref="T:RfmUsb.Net.Ports.ISerialPort"/>.WriteLine(System.String) methods.
            </summary>
        </member>
        <member name="P:RfmUsb.Net.Ports.ISerialPort.ReadBufferSize">
            <summary>
            Gets or sets the size of the <see cref="T:RfmUsb.Net.Ports.ISerialPort"/> input buffer.
            </summary>
        </member>
        <member name="P:RfmUsb.Net.Ports.ISerialPort.ParityReplace">
            <summary>
            Gets or sets the byte that replaces invalid bytes in a data stream when a parity error occurs.
            </summary>
        </member>
        <member name="P:RfmUsb.Net.Ports.ISerialPort.PortName">
            <summary>
            Gets or sets the port for communications, including but not limited to all available COM ports.
            </summary>
        </member>
        <member name="P:RfmUsb.Net.Ports.ISerialPort.CDHolding">
            <summary>
            Gets the state of the Carrier Detect line for the port.
            </summary>
        </member>
        <member name="P:RfmUsb.Net.Ports.ISerialPort.ReadTimeout">
            <summary>
            Gets or sets the number of milliseconds before a time-out occurs when a read operation does not finish.
            </summary>
        </member>
        <member name="P:RfmUsb.Net.Ports.ISerialPort.ReceivedBytesThreshold">
            <summary>
            Gets or sets the number of bytes in the internal input buffer before a <see cref="T:RfmUsb.Net.Ports.ISerialPort"/>.DataReceived event occurs.
            </summary>
        </member>
        <member name="P:RfmUsb.Net.Ports.ISerialPort.RtsEnable">
            <summary>
            Gets or sets a value indicating whether the Request to Send (RTS) signal is enabled during serial communication.
            </summary>
        </member>
        <member name="P:RfmUsb.Net.Ports.ISerialPort.StopBits">
            <summary>
            Gets or sets the standard number of stop-bits per byte.
            </summary>
        </member>
        <member name="P:RfmUsb.Net.Ports.ISerialPort.WriteBufferSize">
            <summary>
            Gets or sets the size of the serial port output buffer.
            </summary>
        </member>
        <member name="P:RfmUsb.Net.Ports.ISerialPort.WriteTimeout">
            <summary>
            Gets or sets the number of milliseconds before a time-out occurs when a write operation does not finish.
            </summary>
        </member>
        <member name="P:RfmUsb.Net.Ports.ISerialPort.Parity">
            <summary>
            Gets or sets the parity-checking protocol.
            </summary>
        </member>
        <member name="P:RfmUsb.Net.Ports.ISerialPort.BytesToWrite">
            <summary>
            Gets the number of bytes of data in the send buffer.
            </summary>
        </member>
        <member name="P:RfmUsb.Net.Ports.ISerialPort.BaudRate">
            <summary>
            Gets or sets the serial baud rate.
            </summary>
        </member>
        <member name="P:RfmUsb.Net.Ports.ISerialPort.BreakState">
            <summary>
            Gets or sets the break signal state.
            </summary>
        </member>
        <member name="P:RfmUsb.Net.Ports.ISerialPort.BaseStream">
            <summary>
            Gets the underlying System.IO.Stream object for a <see cref="T:RfmUsb.Net.Ports.ISerialPort"/> object.
            </summary>
        </member>
        <member name="P:RfmUsb.Net.Ports.ISerialPort.BytesToRead">
            <summary>
            Gets the number of bytes of data in the receive buffer.
            </summary>
        </member>
        <member name="E:RfmUsb.Net.Ports.ISerialPort.DataReceived">
            <summary>
            Indicates that data has been received through a port represented by the <see cref="T:RfmUsb.Net.Ports.ISerialPort"/> object.
            </summary>
        </member>
        <member name="E:RfmUsb.Net.Ports.ISerialPort.PinChanged">
            <summary>
            Indicates that a non-data signal event has occurred on the port represented by the <see cref="T:RfmUsb.Net.Ports.ISerialPort"/> object.
            </summary>
        </member>
        <member name="E:RfmUsb.Net.Ports.ISerialPort.ErrorReceived">
            <summary>
            Indicates that an error has occurred with a port represented by a <see cref="T:RfmUsb.Net.Ports.ISerialPort"/> object.
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Ports.ISerialPort.Close">
            <summary>
            Closes the port connection, sets the <see cref="T:RfmUsb.Net.Ports.ISerialPort"/>.IsOpen property
            to false, and disposes of the internal <see cref="T:System.IO.Stream"/> object.
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Ports.ISerialPort.DiscardInBuffer">
            <summary>
            Discards data from the serial driver's receive buffer.
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Ports.ISerialPort.DiscardOutBuffer">
            <summary>
            Discards data from the serial driver's transmit buffer.
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Ports.ISerialPort.Open">
            <summary>
            Opens a new serial port connection.
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Ports.ISerialPort.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a number of bytes from the <see cref="T:RfmUsb.Net.Ports.ISerialPort"/> input buffer and
            writes those bytes into a byte array at the specified offset.
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Ports.ISerialPort.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a number of characters from the <see cref="T:RfmUsb.Net.Ports.ISerialPort"/> input buffer and writes them into an array of characters at a given offset.
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Ports.ISerialPort.ReadByte">
            <summary>
            Synchronously reads one byte from the <see cref="T:RfmUsb.Net.Ports.ISerialPort"/> input buffer.
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Ports.ISerialPort.ReadChar">
            <summary>
            Synchronously reads one character from the <see cref="T:RfmUsb.Net.Ports.ISerialPort"/> input buffer.
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Ports.ISerialPort.ReadExisting">
            <summary>
            Reads all immediately available bytes, based on the encoding, in both the stream
            and the input buffer of the <see cref="T:RfmUsb.Net.Ports.ISerialPort"/> object.
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Ports.ISerialPort.ReadLine">
            <summary>
            Reads up to the <see cref="T:RfmUsb.Net.Ports.ISerialPort"/>.NewLine value in the input buffer.
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Ports.ISerialPort.ReadTo(System.String)">
            <summary>Reads a string up to the specified value in the input buffer.
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Ports.ISerialPort.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a specified number of bytes to the serial port using data from a buffer.
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Ports.ISerialPort.Write(System.String)">
            <summary>
            Writes the specified string to the serial port.
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Ports.ISerialPort.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a specified number of characters to the serial port using data from a buffer.
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Ports.ISerialPort.WriteLine(System.String)">
            <summary>
            Writes the specified string and the <see cref="P:RfmUsb.Net.Ports.ISerialPort.NewLine"/> value to the output buffer.
            </summary>
        </member>
        <member name="T:RfmUsb.Net.Ports.ISerialPortFactory">
            <summary>
            Defines the <see cref="T:RfmUsb.Net.Ports.ISerialPortFactory"/> interface
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Ports.ISerialPortFactory.GetSerialPorts">
            <summary>
            Get the list of serial ports in the system
            </summary>
            <returns></returns>
        </member>
        <member name="M:RfmUsb.Net.Ports.ISerialPortFactory.CreateSerialPortInstance(System.String)">
            <summary>
            Create an <see cref="T:RfmUsb.Net.Ports.ISerialPort"/> instance
            </summary>
            <param name="serialPort"></param>
            <returns></returns>
        </member>
        <member name="T:RfmUsb.Net.Ports.PortsServiceExtensions">
            <summary>
            An <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> extensions
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Ports.PortsServiceExtensions.AddSerialPortFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the <see cref="T:RfmUsb.Net.Ports.ISerialPortFactory"/> instance to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>
            </summary>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> instance</returns>
        </member>
        <member name="M:RfmUsb.Net.Ports.SerialPortFactory.CreateSerialPortInstance(System.String)">
            <summary>
            Create an instance of a <see cref="T:RfmUsb.Net.Ports.ISerialPort"/>
            </summary>
            <param name="serialPort">The port to use (for example, COM1).</param>
            <returns>An instance of the <see cref="T:RfmUsb.Net.Ports.ISerialPort"/></returns>
        </member>
        <member name="M:RfmUsb.Net.Ports.SerialPortFactory.GetSerialPorts">
            <summary>
            Get the list of serial ports from the OD
            </summary>
            <returns></returns>
        </member>
        <member name="T:RfmUsb.Net.PreambleDetectorSize">
            <summary>
            Number of Preamble bytes to detect to trigger an interrupt
            </summary>
        </member>
        <member name="F:RfmUsb.Net.PreambleDetectorSize.OneByte">
            <summary>
            One byte
            </summary>
        </member>
        <member name="F:RfmUsb.Net.PreambleDetectorSize.TwoBytes">
            <summary>
            Two bytes
            </summary>
        </member>
        <member name="F:RfmUsb.Net.PreambleDetectorSize.ThreeBytes">
            <summary>
            Three bytes
            </summary>
        </member>
        <member name="T:RfmUsb.Net.Rfm69">
            <summary>
            An implementation of the <see cref="T:RfmUsb.Net.IRfm69"/> interface
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Rfm69.#ctor(Microsoft.Extensions.Logging.ILogger{RfmUsb.Net.Rfm69},RfmUsb.Net.Ports.ISerialPortFactory)">
            <summary>
            Create an instance of a <see cref="N:RfmUsb"/>
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> for logging</param>
            <param name="serialPortFactory">The <see cref="T:RfmUsb.Net.Ports.ISerialPortFactory"/> instance for creating and querying serial port instances</param>
        </member>
        <member name="P:RfmUsb.Net.Rfm69.AesOn">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm69.AfcLowBetaOn">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm69.AutoModeEnterCondition">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm69.AutoModeExitCondition">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm69.AutoRxRestartOn">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm69.ContinuousDagc">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm69.CurrentLnaGain">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm69.DataMode">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm69.DccFreq">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm69.DccFreqAfc">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm69.FifoFill">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm69.Impedance">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm69.IntermediateMode">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm69.IrqFlags">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm69.ListenCoefficientIdle">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm69.ListenCoefficientRx">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm69.ListenCriteria">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm69.ListenEnd">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm69.ListenerOn">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm69.ListenResolutionIdle">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm69.ListenResolutionRx">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm69.LowBetaAfcOffset">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm69.OutputPower">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm69.RssiThreshold">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm69.SensitivityBoost">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm69.Sequencer">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm69.SyncBitErrors">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm69.TimeoutRssiThreshold">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm69.TimeoutRxStart">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.Rfm69.ExecuteAfcClear">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.Rfm69.ExecuteAfcStart">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.Rfm69.ExecuteFeiStart">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.Rfm69.ExecuteListenModeAbort(RfmUsb.Net.Mode)">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.Rfm69.ExecuteMeasureTemperature">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.Rfm69.ExecuteRestartRx">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.Rfm69.ExecuteStartRssi">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.Rfm69.SetAesKey(System.Collections.Generic.IEnumerable{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="T:RfmUsb.Net.Rfm69IrqFlags">
            <summary>
            The set of <see cref="T:RfmUsb.Net.Rfm69"/> Irq bits
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm69IrqFlags.None">
            <summary>
            No Irq bit is set
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm69IrqFlags.CrcOK">
            <summary>
            Set in Rx when the CRC of the payload is Ok. Cleared when FIFO is empty.
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm69IrqFlags.PayloadReady">
            <summary>
            Set in Rx when the payload is ready (i.e. last byte received and CRC,
            if enabled and CrcAutoClearOff is cleared,is Ok). Cleared when FIFO is empty.
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm69IrqFlags.PacketSent">
            <summary>
            Set in Tx when the complete packet has been sent. Cleared when exiting Tx.
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm69IrqFlags.FifoOverrun">
            <summary>
            Set when FIFO overrun occurs. (except in Sleep mode) Flag(s) and FIFO are cleared when this bit is set.
            The FIFO then becomes immediately available for the next transmission/reception
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm69IrqFlags.FifoLevel">
            <summary>
            Set when the number of bytes in the FIFO strictly exceeds FifoThreshold, else cleared.
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm69IrqFlags.FifoNotEmpty">
            <summary>
            Set when FIFO contains at least one byte, else cleared
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm69IrqFlags.FifoFull">
            <summary>
            Set when FIFO is full (i.e. contains 66 bytes), else cleared
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm69IrqFlags.SyncAddressMatch">
            <summary>
            Set when Sync and Address (if enabled) are detected. Cleared when leaving Rx or FIFO is emptied.
            This bit is read only in Packet mode, rwc in Continuous mode
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm69IrqFlags.AutoMode">
            <summary>
            Set when entering Intermediate mode. Cleared when exiting
            Intermediate mode. Please note that in Sleep mode a small
            delay can be observed between AutoMode interrupt and the
            corresponding enter/exit condition.
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm69IrqFlags.Timeout">
            <summary>
            Set when a timeout occurs (see TimeoutRxStart and TimeoutRssiThresh) Cleared when leaving Rx or FIFO is emptied.
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm69IrqFlags.Rssi">
            <summary>
            Set in Rx when the RssiValue exceeds RssiThreshold. Cleared when leaving Rx.
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm69IrqFlags.PllLock">
            <summary>
            Set (in FS, Rx or Tx) when the PLL is locked. Cleared when it is not.
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm69IrqFlags.TxReady">
            <summary>
            Set in Tx mode, after PA ramp-up. Cleared when leaving Tx.
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm69IrqFlags.RxReady">
            <summary>
            Set in Rx mode, after RSSI, AGC and AFC. Cleared when leaving Rx.
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm69IrqFlags.ModeReady">
            <summary>
            Set when the operation mode requested in Mode, is ready
            - Sleep: Entering Sleep mode
            - Standby: XO is running
            - FS: PLL is locked
            - Rx: RSSI sampling starts
            - Tx: PA ramp-up completed
            Cleared when changing operating mode.
            </summary>
        </member>
        <member name="T:RfmUsb.Net.Rfm9x">
            <summary>
            An implementation of the <see cref="T:RfmUsb.Net.IRfm9x"/> interface
            </summary>
        </member>
        <member name="M:RfmUsb.Net.Rfm9x.#ctor(Microsoft.Extensions.Logging.ILogger{RfmUsb.Net.Rfm9x},RfmUsb.Net.Ports.ISerialPortFactory)">
            <summary>
            Create an instance of a <see cref="T:RfmUsb.Net.Rfm9x"/> device
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> for logging</param>
            <param name="serialPortFactory">The <see cref="T:RfmUsb.Net.Ports.ISerialPortFactory"/> instance for creating and querying serial port instances</param>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.AccessSharedRegisters">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.AgcAutoOn">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.AutoImageCalibrationOn">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.AutoRestartRxMode">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.BeaconOn">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.BitRateFractional">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.BitSyncOn">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.CrcWhiteningType">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.ErrorCodingRate">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.FastHopOn">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.FifoAddressPointer">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.FifoRxBaseAddress">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.FifoRxByteAddressPointer">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.FifoRxBytesNumber">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.FifoRxCurrentAddress">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.FifoTxBaseAddress">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.FormerTemperature">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.FrequencyError">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.FrequencyHoppingPeriod">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.FromIdle">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.FromPacketReceived">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.FromReceive">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.FromRxTimeout">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.FromStart">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.FromTransmit">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.HopChannel">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.IdleMode">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.ImplicitHeaderModeOn">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.IoHomeOn">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.IoHomePowerFrame">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.IrqFlags">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.LastPacketSnr">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.LnaBoostHf">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.LongRangeMode">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.LoraAgcAutoOn">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.LoraIrqFlags">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.LoraIrqFlagsMask">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.LoraMode">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.LoraPayloadLength">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.LowBatteryOn">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.LowBatteryTrim">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.LowDataRateOptimize">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.LowFrequencyMode">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.LowPowerSelection">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.MapPreambleDetect">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.ModemBandwidth">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.ModemStatus">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.OokAverageOffset">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.OutputPower">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.PacketRssi">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.PayloadMaxLength">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.PpmCorrection">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.PreambleDetectorOn">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.PreambleDetectorSize">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.PreambleDetectorTolerance">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.PreambleLength">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.PreamblePolarity">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.RestartRxOnCollision">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.RssiCollisionThreshold">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.RssiOffset">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.RssiSmoothing">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.RssiThreshold">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.RssiWideband">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.RxCodingRate">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.RxPayloadCrcOn">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.SpreadingFactor">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.SymbolTimeout">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.TcxoInputOn">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.TemperatureChange">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.TemperatureThreshold">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.TempMonitorOff">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.TimeoutRxPreamble">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.TimeoutRxRssi">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.TimeoutSignalSync">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.TxContinuousMode">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.ValidHeaderCount">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.Rfm9x.ValidPacketCount">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.Rfm9x.ExecuteAgcStart">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.Rfm9x.ExecuteImageCalibration">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.Rfm9x.ExecuteRestartRxWithoutPllLock">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.Rfm9x.ExecuteRestartRxWithPllLock">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.Rfm9x.ExecuteSequencerStart">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.Rfm9x.ExecuteSequencerStop">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.Rfm9x.GetTimerCoefficient(RfmUsb.Net.Timer)">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.Rfm9x.GetTimerResolution(RfmUsb.Net.Timer)">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.Rfm9x.SetTimerCoefficient(RfmUsb.Net.Timer,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.Rfm9x.SetTimerResolution(RfmUsb.Net.Timer,RfmUsb.Net.TimerResolution)">
            <inheritdoc/>
        </member>
        <member name="T:RfmUsb.Net.Rfm9xIrqFlags">
            <summary>
            The set of <see cref="T:RfmUsb.Net.Rfm69"/> Irq bits
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm9xIrqFlags.None">
            <summary>
            No Irq bit is set
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm9xIrqFlags.LowBattery">
            <summary>
            Set when the battery voltage drops below the Low Battery threshold.
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm9xIrqFlags.CrcOK">
            <summary>
            Set in Rx when the CRC of the payload is Ok. Cleared when FIFO is empty.
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm9xIrqFlags.PayloadReady">
            <summary>
            Set in Rx when the payload is ready (i.e. last byte received and CRC,
            if enabled and CrcAutoClearOff is cleared,is Ok). Cleared when FIFO is empty.
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm9xIrqFlags.PacketSent">
            <summary>
            Set in Tx when the complete packet has been sent. Cleared when exiting Tx.
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm9xIrqFlags.FifoOverrun">
            <summary>
            Set when FIFO overrun occurs. (except in Sleep mode) Flag(s) and FIFO are cleared when this bit is set.
            The FIFO then becomes immediately available for the next transmission/reception
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm9xIrqFlags.FifoLevel">
            <summary>
            Set when the number of bytes in the FIFO strictly exceeds FifoThreshold, else cleared.
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm9xIrqFlags.FifoNotEmpty">
            <summary>
            Set when FIFO contains at least one byte, else cleared
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm9xIrqFlags.FifoFull">
            <summary>
            Set when FIFO is full (i.e. contains 66 bytes), else cleared
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm9xIrqFlags.SyncAddressMatch">
            <summary>
            Set when Sync and Address (if enabled) are detected. Cleared when leaving Rx or FIFO is emptied.
            This bit is read only in Packet mode, rwc in Continuous mode
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm9xIrqFlags.PreambleDetect">
            <summary>
            Set when the Preamble Detector has found valid Preamble.
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm9xIrqFlags.Timeout">
            <summary>
            Set when a timeout occurs. Cleared when leaving Rx or FIFO is emptied.
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm9xIrqFlags.Rssi">
            <summary>
            Set in Rx when the RssiValue exceeds RssiThreshold. Cleared when leaving Rx.
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm9xIrqFlags.PllLock">
            <summary>
            Set (in FS, Rx or Tx) when the PLL is locked. Cleared when it is not.
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm9xIrqFlags.TxReady">
            <summary>
            Set in Tx mode, after PA ramp-up. Cleared when leaving Tx.
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm9xIrqFlags.RxReady">
            <summary>
            Set in Rx mode, after RSSI, AGC and AFC. Cleared when leaving Rx.
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Rfm9xIrqFlags.ModeReady">
            <summary>
            Set when the operation mode requested in Mode, is ready
            - Sleep: Entering Sleep mode
            - Standby: XO is running
            - FS: PLL is locked
            - Rx: RSSI sampling starts
            - Tx: PA ramp-up completed
            Cleared when changing operating mode.
            </summary>
        </member>
        <member name="T:RfmUsb.Net.RfmBase">
            <summary>
            A base Rfm class
            </summary>
        </member>
        <member name="M:RfmUsb.Net.RfmBase.#ctor(Microsoft.Extensions.Logging.ILogger{RfmUsb.Net.RfmBase},RfmUsb.Net.Ports.ISerialPortFactory)">
            <summary>
            Create an instance of an <see cref="T:RfmUsb.Net.RfmBase"/> derived type.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> instance</param>
            <param name="serialPortFactory">The <see cref="F:RfmUsb.Net.RfmBase.SerialPortFactory"/> instance</param>
            <exception cref="T:System.ArgumentNullException">if any parameter is null</exception>
        </member>
        <member name="E:RfmUsb.Net.RfmBase.DioInterrupt">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.AddressFiltering">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.Afc">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.AfcAutoClear">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.AfcAutoOn">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.BitRate">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.BroadcastAddress">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.BufferedIoEnable">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.BufferedIoInfo">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.CrcAutoClearOff">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.CrcOn">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.DcFreeEncoding">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.DioInterruptMask">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.Fei">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.Fifo">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.FifoThreshold">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.FirmwareVersion">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.Frequency">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.FrequencyDeviation">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.FskModulationShaping">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.InterPacketRxDelay">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.LastRssi">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.LnaGainSelect">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.Mode">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.ModulationType">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.NodeAddress">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.OcpEnable">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.OcpTrim">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.OokAverageThresholdFilter">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.OokFixedThreshold">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.OokModulationShaping">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.OokPeakThresholdDec">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.OokPeakThresholdStep">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.OokThresholdType">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.PacketFormat">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.PaRamp">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.PayloadLength">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.PreambleSize">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.RadioVersion">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.Rssi">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.RxBw">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.RxBwAfc">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.SerialNumber">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.Stream">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.Sync">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.SyncEnable">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.SyncSize">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.Temperature">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.Timeout">
            <inheritdoc/>
        </member>
        <member name="P:RfmUsb.Net.RfmBase.TxStartCondition">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.RfmBase.Close">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.RfmBase.EnterBootloader">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.RfmBase.ExecuteReset">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.RfmBase.GetDioMapping(RfmUsb.Net.Dio)">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.RfmBase.Open(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.RfmBase.RcCalibration">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.RfmBase.ReadFromBuffer(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.RfmBase.SetDioMapping(RfmUsb.Net.Dio,RfmUsb.Net.DioMapping)">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.RfmBase.Transmit(System.Collections.Generic.IList{System.Byte},System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.RfmBase.Transmit(System.Collections.Generic.IList{System.Byte},System.Int32,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.RfmBase.Transmit(System.Collections.Generic.IList{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.RfmBase.Transmit(System.Collections.Generic.IList{System.Byte},System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.RfmBase.TransmitBuffer">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.RfmBase.TransmitReceive(System.Collections.Generic.IList{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.RfmBase.TransmitReceive(System.Collections.Generic.IList{System.Byte},System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.RfmBase.TransmitReceive(System.Collections.Generic.IList{System.Byte},System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.RfmBase.WriteToBuffer(System.Collections.Generic.IEnumerable{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:RfmUsb.Net.RfmBase.CheckDeviceVersion(System.String)">
            <summary>
            Check the firmware version of the connected device
            </summary>
            <param name="firmwareVersion">The firmware version string to check</param>
        </member>
        <member name="M:RfmUsb.Net.RfmBase.Dispose">
            <summary>
            Dispose the <see cref="T:RfmUsb.Net.IRfm"/> instance
            </summary>
        </member>
        <member name="M:RfmUsb.Net.RfmBase.Dispose(System.Boolean)">
            <summary>
            Dispose the <see cref="T:RfmUsb.Net.IRfm"/> instance
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:RfmUsb.Net.RfmUsbServiceExtensions">
            <summary>
            Extensions for the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to enable configuration of rfmusb dependencies
            </summary>
        </member>
        <member name="M:RfmUsb.Net.RfmUsbServiceExtensions.AddRfmUsb(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add a singleton instance of an <see cref="T:RfmUsb.Net.IRfm69"/> implementation
            </summary>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to add the <see cref="T:RfmUsb.Net.IRfm69"/> and <see cref="T:RfmUsb.Net.IRfm9x"/> instance</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="T:RfmUsb.Net.RssiSmoothing">
            <summary>
            Defines the number of samples taken to average the RSSI result
            </summary>
        </member>
        <member name="F:RfmUsb.Net.RssiSmoothing.Samples2">
            <summary>
            2 Samples
            </summary>
        </member>
        <member name="F:RfmUsb.Net.RssiSmoothing.Samples4">
            <summary>
            4 Samples
            </summary>
        </member>
        <member name="F:RfmUsb.Net.RssiSmoothing.Samples8">
            <summary>
            8 Samples
            </summary>
        </member>
        <member name="F:RfmUsb.Net.RssiSmoothing.Samples16">
            <summary>
            16 Samples
            </summary>
        </member>
        <member name="F:RfmUsb.Net.RssiSmoothing.Samples32">
            <summary>
            32 Samples
            </summary>
        </member>
        <member name="F:RfmUsb.Net.RssiSmoothing.Samples64">
            <summary>
            64 Samples
            </summary>
        </member>
        <member name="F:RfmUsb.Net.RssiSmoothing.Samples128">
            <summary>
            128 Samples
            </summary>
        </member>
        <member name="F:RfmUsb.Net.RssiSmoothing.Samples256">
            <summary>
            256 Samples
            </summary>
        </member>
        <member name="T:RfmUsb.Net.SpreadingFactor">
            <summary>
            The spreading factor rate
            </summary>
        </member>
        <member name="F:RfmUsb.Net.SpreadingFactor.SpreadFactor64">
            <summary>
            64 Chips Symbol
            </summary>
        </member>
        <member name="F:RfmUsb.Net.SpreadingFactor.SpreadFactor128">
            <summary>
            128 Chips Symbol
            </summary>
        </member>
        <member name="F:RfmUsb.Net.SpreadingFactor.SpreadFactor256">
            <summary>
            256 Chips Symbol
            </summary>
        </member>
        <member name="F:RfmUsb.Net.SpreadingFactor.SpreadFactor512">
            <summary>
            512 Chips Symbol
            </summary>
        </member>
        <member name="F:RfmUsb.Net.SpreadingFactor.SpreadFactor1024">
            <summary>
            1024 Chips Symbol
            </summary>
        </member>
        <member name="F:RfmUsb.Net.SpreadingFactor.SpreadFactor2048">
            <summary>
            2048 Chips Symbol
            </summary>
        </member>
        <member name="F:RfmUsb.Net.SpreadingFactor.SpreadFactor4096">
            <summary>
            4096 Chips Symbol
            </summary>
        </member>
        <member name="T:RfmUsb.Net.TemperatureThreshold">
            <summary>
            Temperature change threshold to trigger a new I/Q calibration
            </summary>
        </member>
        <member name="F:RfmUsb.Net.TemperatureThreshold.FiveDegrees">
            <summary>
            Five Degrees
            </summary>
        </member>
        <member name="F:RfmUsb.Net.TemperatureThreshold.TenDegrees">
            <summary>
            Ten Degrees
            </summary>
        </member>
        <member name="F:RfmUsb.Net.TemperatureThreshold.FifteenDegrees">
            <summary>
            Fifteen Degrees
            </summary>
        </member>
        <member name="F:RfmUsb.Net.TemperatureThreshold.TwentyDegrees">
            <summary>
            Twenty Degrees
            </summary>
        </member>
        <member name="T:RfmUsb.Net.Timer">
            <summary>
            The timer
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Timer.Timer1">
            <summary>
            Timer 1
            </summary>
        </member>
        <member name="F:RfmUsb.Net.Timer.Timer2">
            <summary>
            Timer 2
            </summary>
        </member>
        <member name="T:RfmUsb.Net.TimerResolution">
            <summary>
            The timer resolution
            </summary>
        </member>
        <member name="F:RfmUsb.Net.TimerResolution.Reserved">
            <summary>
            Reserved Value
            </summary>
        </member>
        <member name="F:RfmUsb.Net.TimerResolution.Resolution64us">
            <summary>
            64 us
            </summary>
        </member>
        <member name="F:RfmUsb.Net.TimerResolution.Resolution4_1ms">
            <summary>
            4.1 ms
            </summary>
        </member>
        <member name="F:RfmUsb.Net.TimerResolution.Resolution256ms">
            <summary>
            262 ms
            </summary>
        </member>
    </members>
</doc>
