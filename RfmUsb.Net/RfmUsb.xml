<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RfmUsb</name>
    </assembly>
    <members>
        <member name="T:RfmUsb.AddressFilter">
            <summary>
            Defines address based filtering in Rx mode
            </summary>
        </member>
        <member name="F:RfmUsb.AddressFilter.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:RfmUsb.AddressFilter.Node">
            <summary>
            Node
            </summary>
        </member>
        <member name="F:RfmUsb.AddressFilter.NodeBroaddcast">
            <summary>
            Node or Broadcast
            </summary>
        </member>
        <member name="F:RfmUsb.AddressFilter.Reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="T:RfmUsb.ContinuousDagc">
            <summary>
            Continuous adjust of the digital gain
            </summary>
        </member>
        <member name="F:RfmUsb.ContinuousDagc.Normal">
            <summary>
            Normal Mode
            </summary>
        </member>
        <member name="F:RfmUsb.ContinuousDagc.ImprovedLowBeta1">
            <summary>
            Improved margin, use if AfcLowBetaOn=1
            </summary>
        </member>
        <member name="F:RfmUsb.ContinuousDagc.ImprovedLowBeta0">
            <summary>
            Improved margin, use if AfcLowBetaOn=0
            </summary>
        </member>
        <member name="T:RfmUsb.DccFreq">
            <summary>
            Cut-off frequency of the DC offset canceller (DCC)
            </summary>
        </member>
        <member name="F:RfmUsb.DccFreq.FreqPercent16">
            <summary>
            Sixteen percent of the RxBw
            </summary>
        </member>
        <member name="F:RfmUsb.DccFreq.FreqPercent8">
            <summary>
            Eight percent of the RxBw
            </summary>
        </member>
        <member name="F:RfmUsb.DccFreq.FreqPercent4">
            <summary>
            Four percent of the RxBw (Default)
            </summary>
        </member>
        <member name="F:RfmUsb.DccFreq.FreqPercent2">
            <summary>
            Two percent of the RxBw
            </summary>
        </member>
        <member name="F:RfmUsb.DccFreq.FreqPercent1">
            <summary>
            One percent of the RxBw
            </summary>
        </member>
        <member name="F:RfmUsb.DccFreq.FreqPercent0_5">
            <summary>
            Half percent of the RxBw
            </summary>
        </member>
        <member name="F:RfmUsb.DccFreq.FreqPercent0_25">
            <summary>
            Quarter of a percent of the RxBw
            </summary>
        </member>
        <member name="F:RfmUsb.DccFreq.FreqPercent0_125">
            <summary>
            .125 percent of the RxBw
            </summary>
        </member>
        <member name="T:RfmUsb.DcFree">
            <summary>
            Defines DC-free encoding/decoding
            </summary>
        </member>
        <member name="F:RfmUsb.DcFree.None">
            <summary>
            None Off
            </summary>
        </member>
        <member name="F:RfmUsb.DcFree.Manchester">
            <summary>
            Manchester encoding
            </summary>
        </member>
        <member name="F:RfmUsb.DcFree.Whitening">
            <summary>
            Data whitening
            </summary>
        </member>
        <member name="F:RfmUsb.DcFree.Reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="T:RfmUsb.Dio">
            <summary>
            The Rfm69 digital io pins
            </summary>
        </member>
        <member name="F:RfmUsb.Dio.Dio0">
            <summary>
            Dio0 pin
            </summary>
        </member>
        <member name="F:RfmUsb.Dio.Dio1">
            <summary>
            Dio1 pin
            </summary>
        </member>
        <member name="F:RfmUsb.Dio.Dio2">
            <summary>
            Dio2 pin
            </summary>
        </member>
        <member name="F:RfmUsb.Dio.Dio3">
            <summary>
            Dio3 pin
            </summary>
        </member>
        <member name="F:RfmUsb.Dio.Dio4">
            <summary>
            Dio4 pin
            </summary>
        </member>
        <member name="F:RfmUsb.Dio.Dio5">
            <summary>
            Dio5 pin
            </summary>
        </member>
        <member name="T:RfmUsb.DioIrq">
            <summary>
            The Dio irq line interrupt bit
            </summary>
        </member>
        <member name="F:RfmUsb.DioIrq.None">
            <summary>
            No Dio line set
            </summary>
        </member>
        <member name="F:RfmUsb.DioIrq.Dio0">
            <summary>
            Dio0 set
            </summary>
        </member>
        <member name="F:RfmUsb.DioIrq.Dio1">
            <summary>
            Dio1 set
            </summary>
        </member>
        <member name="F:RfmUsb.DioIrq.Dio2">
            <summary>
            Dio1 set
            </summary>
        </member>
        <member name="F:RfmUsb.DioIrq.Dio3">
            <summary>
            Dio3 set
            </summary>
        </member>
        <member name="F:RfmUsb.DioIrq.Dio4">
            <summary>
            Dio3 set
            </summary>
        </member>
        <member name="F:RfmUsb.DioIrq.Dio5">
            <summary>
            Dio5 set
            </summary>
        </member>
        <member name="T:RfmUsb.DioMapping">
            <summary>
            The Rfm69 digital io pin mappings
            </summary>
        </member>
        <member name="F:RfmUsb.DioMapping.DioMapping0">
            <summary>
            Dio Mapping 0
            </summary>
        </member>
        <member name="F:RfmUsb.DioMapping.DioMapping1">
            <summary>
            Dio Mapping 1
            </summary>
        </member>
        <member name="F:RfmUsb.DioMapping.DioMapping2">
            <summary>
            Dio Mapping 2
            </summary>
        </member>
        <member name="F:RfmUsb.DioMapping.DioMapping3">
            <summary>
            Dio Mapping 3
            </summary>
        </member>
        <member name="T:RfmUsb.EnterCondition">
            <summary>
            The interrupt condition for entering the intermediate mode
            </summary>
        </member>
        <member name="F:RfmUsb.EnterCondition.Off">
            <summary>
            None (AutoModes Off)
            </summary>
        </member>
        <member name="F:RfmUsb.EnterCondition.FifoNotEmpty">
            <summary>
            Rising edge of FifoNotEmpty
            </summary>
        </member>
        <member name="F:RfmUsb.EnterCondition.FifoLevel">
            <summary>
            Rising edge of FifoLevel
            </summary>
        </member>
        <member name="F:RfmUsb.EnterCondition.CrcOk">
            <summary>
            Rising edge of CrcOk
            </summary>
        </member>
        <member name="F:RfmUsb.EnterCondition.PayloadReady">
            <summary>
            Rising edge of PayloadReady
            </summary>
        </member>
        <member name="F:RfmUsb.EnterCondition.SyncAddressMatch">
            <summary>
            Rising edge of SyncAddress
            </summary>
        </member>
        <member name="F:RfmUsb.EnterCondition.PacketSent">
            <summary>
            Rising edge of PacketSent
            </summary>
        </member>
        <member name="F:RfmUsb.EnterCondition.FifoEmpty">
            <summary>
            Falling edge of FifoNotEmpty (i.e. FIFO empty)
            </summary>
        </member>
        <member name="T:RfmUsb.Exceptions.RfmUsbCommandExecutionException">
            <summary>
            Throw when a command execution fails
            </summary>
        </member>
        <member name="M:RfmUsb.Exceptions.RfmUsbCommandExecutionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RfmUsb.Exceptions.RfmUsbCommandExecutionException" /> class.
            </summary>
        </member>
        <member name="M:RfmUsb.Exceptions.RfmUsbCommandExecutionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RfmUsb.Exceptions.RfmUsbCommandExecutionException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:RfmUsb.Exceptions.RfmUsbCommandExecutionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:RfmUsb.Exceptions.RfmUsbCommandExecutionException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception,
            or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:RfmUsb.Exceptions.RfmUsbCommandExecutionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:RfmUsb.Exceptions.RfmUsbCommandExecutionException" /> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds
            the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="T:RfmUsb.Exceptions.RfmUsbSerialPortNotFoundException">
            <summary>
            Throw when the specified serial port is not found
            </summary>
        </member>
        <member name="M:RfmUsb.Exceptions.RfmUsbSerialPortNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RfmUsb.Exceptions.RfmUsbSerialPortNotFoundException" /> class.
            </summary>
        </member>
        <member name="M:RfmUsb.Exceptions.RfmUsbSerialPortNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RfmUsb.Exceptions.RfmUsbSerialPortNotFoundException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:RfmUsb.Exceptions.RfmUsbSerialPortNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:RfmUsb.Exceptions.RfmUsbSerialPortNotFoundException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception,
            or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:RfmUsb.Exceptions.RfmUsbSerialPortNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:RfmUsb.Exceptions.RfmUsbSerialPortNotFoundException" /> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds
            the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="T:RfmUsb.Exceptions.RfmUsbTransmitException">
            <summary>
            Throw when a error occurs during transmission
            </summary>
        </member>
        <member name="M:RfmUsb.Exceptions.RfmUsbTransmitException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RfmUsb.Exceptions.RfmUsbTransmitException" /> class.
            </summary>
        </member>
        <member name="M:RfmUsb.Exceptions.RfmUsbTransmitException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RfmUsb.Exceptions.RfmUsbTransmitException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:RfmUsb.Exceptions.RfmUsbTransmitException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:RfmUsb.Exceptions.RfmUsbTransmitException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception,
            or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:RfmUsb.Exceptions.RfmUsbTransmitException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:RfmUsb.Exceptions.RfmUsbTransmitException" /> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds
            the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="T:RfmUsb.ExitCondition">
            <summary>
            The interrupt condition for exiting the intermediate mode
            </summary>
        </member>
        <member name="F:RfmUsb.ExitCondition.Off">
            <summary>
            None (AutoModes Off)
            </summary>
        </member>
        <member name="F:RfmUsb.ExitCondition.FifoEmpty">
            <summary>
            Falling edge of FifoNotEmpty (i.e. FIFO empty)
            </summary>
        </member>
        <member name="F:RfmUsb.ExitCondition.FifoLevel">
            <summary>
            Rising edge of FifoLevel or Timeout
            </summary>
        </member>
        <member name="F:RfmUsb.ExitCondition.CrcOk">
            <summary>
            Rising edge of CrcOk or Timeout
            </summary>
        </member>
        <member name="F:RfmUsb.ExitCondition.PayloadReady">
            <summary>
            Rising edge of PayloadReady or Timeout
            </summary>
        </member>
        <member name="F:RfmUsb.ExitCondition.SyncAddressMatch">
            <summary>
            Rising edge of SyncAddress or Timeout
            </summary>
        </member>
        <member name="F:RfmUsb.ExitCondition.PacketSent">
            <summary>
            Rising edge of PacketSent
            </summary>
        </member>
        <member name="F:RfmUsb.ExitCondition.RxTimeout">
            <summary>
            Rising edge of Timeout
            </summary>
        </member>
        <member name="T:RfmUsb.FskModulationShaping">
            <summary>
            Fsk data shaping
            </summary>
        </member>
        <member name="F:RfmUsb.FskModulationShaping.None">
            <summary>
            No Shapping
            </summary>
        </member>
        <member name="F:RfmUsb.FskModulationShaping.GaussianBt1_0">
            <summary>
            Gaussian filter, BT = 1.0
            </summary>
        </member>
        <member name="F:RfmUsb.FskModulationShaping.GaussianBt0_5">
            <summary>
            Gaussian filter, BT = 0.5
            </summary>
        </member>
        <member name="F:RfmUsb.FskModulationShaping.GaussianBt0_3">
            <summary>
            Gaussian filter, BT = 0.3
            </summary>
        </member>
        <member name="T:RfmUsb.HexUtil">
            <summary>
            Set of hex string extensions
            </summary>
        </member>
        <member name="M:RfmUsb.HexUtil.ToBytes(System.String)">
            <summary>
            Convert a hex string to a sequence of bytes
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="T:RfmUsb.IntermediateMode">
            <summary>
            Intermediate mode
            </summary>
        </member>
        <member name="F:RfmUsb.IntermediateMode.Sleep">
            <summary>
            Sleep mode (SLEEP)
            </summary>
        </member>
        <member name="F:RfmUsb.IntermediateMode.Standby">
            <summary>
            Standby mode (STDBY)
            </summary>
        </member>
        <member name="F:RfmUsb.IntermediateMode.Rx">
            <summary>
            Receiver mode (RX)
            </summary>
        </member>
        <member name="F:RfmUsb.IntermediateMode.Tx">
            <summary>
            Transmitter mode (TX)
            </summary>
        </member>
        <member name="T:RfmUsb.IRfmUsb">
            <summary>
            An rfm69 Usb device
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.Fifo">
            <summary>
            Get or set the fifo data
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.Sequencer">
            <summary>
            Get or set the automatic Sequencer enable
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.ListenerOn">
            <summary>
            Enables Listen mode, should be enabled whilst in Standby mode
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.Mode">
            <summary>
            Get or set the current mode
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.Modulation">
            <summary>
            Get or set the modulation type
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.FskModulationShaping">
            <summary>
            The Fsk data shaping
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.OokModulationShaping">
            <summary>
            The Ook data shaping
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.BitRate">
            <summary>
            Get or set the radio Tx/Rx bit rate
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.FrequencyDeviation">
            <summary>
            Get or set the frequency deviation
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.Frequency">
            <summary>
            Get or set the frequency
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.AfcLowBetaOn">
            <summary>
            Improved AFC routine for signals with modulation index lower than 2.
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.ListenResolutionIdle">
            <summary>
            The resolution of Listen mode Idle time
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.ListenResolutionRx">
            <summary>
            The resolution of Listen mode Rx time
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.ListenCriteria">
            <summary>
            Criteria for packet acceptance in Listen mode:
            false : signal strength is above RssiThreshold
            true : signal strength is above RssiThreshold and SyncAddress matched
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.ListenEnd">
            <summary>
            Action taken after acceptance of a packet in Listen mode
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.ListenCoefficentIdle">
            <summary>
            Duration of the Idle phase in Listen mode
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.ListenCoefficentRx">
            <summary>
            Duration of the Idle phase in Rx phase
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.Version">
            <summary>
            Get the FrmUsb version
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.OutputPower">
            <summary>
            Get or set the output power in dbm
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.PaRamp">
            <summary>
            Rise/Fall time of ramp up/down in FSK
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.OcpEnable">
            <summary>
            Enables overload current protection (OCP) for the PA
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.OcpTrim">
            <summary>
            Trimming of OCP current
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.Impedance">
            <summary>
            LNA’s input impedance
            false : 50 ohms
            true : 200 ohms
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.CurrentLnaGain">
            <summary>
            Current LNA gain, set either manually, or by the AGC
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.LnaGainSelect">
            <summary>
            LNA gain setting
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.DccFreq">
            <summary>
            Cut-off frequency of the DC offset canceller (DCC)
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.RxBw">
            <summary>
            Gets the Rx channel filter bandwidth
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.DccFreqAfc">
            <summary>
            Cut-off frequency of the DC offset canceller (DCC)
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.RxBwAfc">
            <summary>
            Gets the Rx channel filter bandwidth for Afc
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.OokThresholdType">
            <summary>
            Selects type of threshold in the OOK data slicer
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.OokPeakThresholdStep">
            <summary>
            Size of each decrement of the RSSI threshold in the OOKdemodulator
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.OokPeakThresholdDec">
            <summary>
            Period of decrement of the RSSI threshold in the OOK demodulator
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.OokAverageThresholdFilter">
            <summary>
            Filter coefficients in average mode of the OOK demodulator
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.OokFixedThreshold">
            <summary>
            Fixed threshold value (in dB) in the OOK demodulator.
            Used when OokThresholdType is <see cref="F:RfmUsb.OokThresholdType.Fixed" />
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.AfcAutoClear">
            <summary>
            Only valid if AfcAutoOn is set
            false : AFC register is not cleared before a new AFC phase
            true : AFC register is cleared before a new AFC phase
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.AfcAutoOn">
            <summary>
            false : AFC is performed each time AfcStart is set
            true : AFC is performed each time Rx mode is entered
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.Afc">
            <summary>
            The Afc value
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.Fei">
            <summary>
            The Fei value
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.Rssi">
            <summary>
            Absolute value of the RSSI in dBm, 0.5dB steps. RSSI = -RssiValue/2 [dBm
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.Irq">
            <summary>
            Get the Irq flags
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.RssiThreshold">
            <summary>
            RSSI trigger level for Rssi interrupt
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.TimeoutRxStart">
            <summary>
            Timeout interrupt is generated TimeoutRxStart*16*Tbit after switching to Rx mode
            if Rssi interrupt doesn’t occur(i.e. RssiValue > RssiThreshold)
            0x00: TimeoutRxStart is disabled
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.TimeoutRssiThreshold">
            <summary>
            Timeout interrupt is generated TimeoutRxStart*16*Tbit after switching to Rx mode
            if Rssi interrupt doesn’t occur(i.e. RssiValue > RssiThreshold)
            0x00: TimeoutRxStart is disabled
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.PreambleSize">
            <summary>
            Size of the preamble to be sent (from TxStartConditionfulfilled)
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.SyncEnable">
            <summary>
            Enable sync word generation and detection
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.FifoFill">
            <summary>
            FIFO filling condition:
            false : if SyncAddress interrupt occurs
            true : as long as FifoFillCondition is set
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.SyncBitErrors">
            <summary>
            Get or set the number of tolerated bit errors in Sync word
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.Sync">
            <summary>
            The radio sync bytes
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.SyncSize">
            <summary>
            The radio sync word size
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.PacketFormat">
            <summary>
            Defines the packet format used:
            false : Fixed length
            true : Variable length
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.DcFree">
            <summary>
            Defines DC-free encoding/decoding performed
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.CrcOn">
            <summary>
            Enables CRC calculation/check (Tx/Rx)
            false : Off
            true : On
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.CrcAutoClear">
            <summary>
            Defines the behavior of the packet handler when CRC check fails:
            false : Clear FIFO and restart new packet reception. NoPayloadReady interrupt issued.
            true : Do not clear FIFO. PayloadReady interrupt issued.
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.AddressFiltering">
            <summary>
            Defines address based filtering in Rx
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.PayloadLength">
            <summary>
            If PacketFormat = false (fixed), payload length.
            If PacketFormat = true (variable), max length in Rx, not used in Tx.
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.NodeAddress">
            <summary>
            Node address used in address filtering
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.BroadcastAddress">
            <summary>
            Broadcast address used in address filtering
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.EnterCondition">
            <summary>
            Interrupt condition for entering the intermediate mode
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.ExitCondition">
            <summary>
            Interrupt condition for exiting the intermediate mode
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.IntermediateMode">
            <summary>
            Intermediate mode
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.TxStartCondition">
            <summary>
            Defines the condition to start packet transmission :
            false : FifoLevel (i.e. the number of bytes in the FIFO exceeds FifoThreshold)
            true : FifoNotEmpty (i.e. at least one byte in the FIFO)
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.FifoThreshold">
            <summary>
            Used to trigger FifoLevel interrupt.
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.InterPacketRxDelay">
            <summary>
            After PayloadReady occurred, defines the delay between FIFO empty and the
            start of a new RSSI phase for next packet. Must match the transmitter’s PA ramp-down time.
            - Tdelay = 0 if InterpacketRxDelay >= 12
            - Tdelay = (2^InterpacketRxDelay) / BitRate otherwise
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.AutoRxRestartOn">
            <summary>
            Enables automatic Rx restart (RSSI phase) after PayloadReady occurred and packet has been completely read from FIFO:
            false : Off. RestartRx can be used.
            true: On. Rx automatically restarted after InterPacketRxDelay.
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.AesOn">
            <summary>
            Enable the AES encryption/decryption:
            false : Off
            true : On (payload limited to 66 bytes maximum)
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.TemperatureValue">
            <summary>
            Measured temperature value
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.SensitivityBoost">
            <summary>
            High sensitivity or normal sensitivity mode
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.ContinuousDagc">
            <summary>
            Fading Margin Improvement
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.LowBetaAfcOffset">
            <summary>
            AFC offset set for low modulation index systems, used if AfcLowBetaOn = true.
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.DioInterruptMask">
            <summary>
            The Dio interrupt mask
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.Timeout">
            <summary>
            Get or set the serial port timeout
            </summary>
        </member>
        <member name="M:RfmUsb.IRfmUsb.WaitForIrq">
            <summary>
            Wait for a configured Irq to be signaled
            </summary>
        </member>
        <member name="P:RfmUsb.IRfmUsb.RadioConfig">
            <summary>
            Sets the radio configuration to one of the preset configuration sets.
            </summary>
        </member>
        <member name="M:RfmUsb.IRfmUsb.Reset">
            <summary>
            Reset the radio
            </summary>
        </member>
        <member name="M:RfmUsb.IRfmUsb.Close">
            <summary>
            Close the connection to the RfmUsb device
            </summary>
        </member>
        <member name="M:RfmUsb.IRfmUsb.Open(System.String,System.Int32)">
            <summary>
            Open the RfmUsb device
            </summary>
            <param name="serialPort">The serial port</param>
            <param name="baudRate">The baud rate</param>
        </member>
        <member name="M:RfmUsb.IRfmUsb.ListenAbort">
            <summary>
            Abort listen mode
            </summary>
        </member>
        <member name="M:RfmUsb.IRfmUsb.RcCalibration">
            <summary>
            Triggers the calibration of the RC oscillator
            </summary>
        </member>
        <member name="M:RfmUsb.IRfmUsb.FeiStart">
            <summary>
            Triggers a FEI measurement
            </summary>
        </member>
        <member name="M:RfmUsb.IRfmUsb.AfcClear">
            <summary>
            Clears the AfcValue if set in Rx mode
            </summary>
        </member>
        <member name="M:RfmUsb.IRfmUsb.AfcStart">
            <summary>
            Triggers an AFC
            </summary>
        </member>
        <member name="M:RfmUsb.IRfmUsb.StartRssi">
            <summary>
            Trigger a RSSI measurement
            </summary>
        </member>
        <member name="M:RfmUsb.IRfmUsb.GetRadioConfigurations">
            <summary>
            Get a list of the pre-configured radio configurations
            </summary>
            <returns></returns>
        </member>
        <member name="M:RfmUsb.IRfmUsb.SetDioMapping(RfmUsb.Dio,RfmUsb.DioMapping)">
            <summary>
            Set the <see cref="T:RfmUsb.Dio" /> mapping configuration <see cref="T:RfmUsb.DioMapping" />
            </summary>
            <param name="dio">The <see cref="T:RfmUsb.Dio" /> configuration</param>
            <param name="mapping">The <see cref="T:RfmUsb.DioMapping" /></param>
        </member>
        <member name="M:RfmUsb.IRfmUsb.GetDioMapping(RfmUsb.Dio,RfmUsb.DioMapping@)">
            <summary>
            Get the <see cref="T:RfmUsb.Dio" /> mapping configuration <see cref="T:RfmUsb.DioMapping" />
            </summary>
            <param name="dio">The <see cref="T:RfmUsb.Dio" /></param>
            <param name="mapping">The <see cref="T:RfmUsb.DioMapping" /></param>
        </member>
        <member name="M:RfmUsb.IRfmUsb.RestartRx">
            <summary>
            Forces the Receiver in WAIT mode, in Continuous Rx mode.
            </summary>
        </member>
        <member name="M:RfmUsb.IRfmUsb.MeasureTemperature">
            <summary>
            Execute a temperature measurement
            </summary>
        </member>
        <member name="M:RfmUsb.IRfmUsb.SetAesKey(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Set the AES encryption key
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:RfmUsb.IRfmUsb.TransmitReceive(System.Collections.Generic.IList{System.Byte})">
            <summary>
            Transmit a packet of data bytes and wait for a response
            </summary>
            <param name="data">The data to transmit</param>
        </member>
        <member name="M:RfmUsb.IRfmUsb.TransmitReceive(System.Collections.Generic.IList{System.Byte},System.Int32)">
            <summary>
            Transmit a packet of data bytes and wait for a response
            </summary>
            <param name="data">The data to transmit</param>
            <param name="txTimeout">The timeout in milliseconds </param>
            <returns>The received packet bytes</returns>
        </member>
        <member name="M:RfmUsb.IRfmUsb.TransmitReceive(System.Collections.Generic.IList{System.Byte},System.Int32,System.Int32)">
            <summary>
            Transmit a packet of data bytes and wait for a response
            </summary>
            <param name="data">The data to transmit</param>
            <param name="txTimeout">The transmit timeout in milliseconds</param>
            <param name="rxTimeout">The receive timeout in milliseconds</param>
        </member>
        <member name="M:RfmUsb.IRfmUsb.Transmit(System.Collections.Generic.IList{System.Byte})">
            <summary>
            Transmit a packet of data bytes
            </summary>
            <param name="data">The data to transmit</param>
        </member>
        <member name="M:RfmUsb.IRfmUsb.Transmit(System.Collections.Generic.IList{System.Byte},System.Int32)">
            <summary>
            Transmit a packet of data bytes
            </summary>
            <param name="data">The data to transmit</param>
            <param name="txTimeout">The transmit timeout</param>
        </member>
        <member name="T:RfmUsb.Irq">
            <summary>
            The set of Irq bits
            </summary>
        </member>
        <member name="F:RfmUsb.Irq.None">
            <summary>
            No Irq bit is sey
            </summary>
        </member>
        <member name="F:RfmUsb.Irq.CrcOK">
            <summary>
            Set in Rx when the CRC of the payload is Ok. Cleared when FIFO is empty.
            </summary>
        </member>
        <member name="F:RfmUsb.Irq.PayloadReady">
            <summary>
            Set in Rx when the payload is ready (i.e. last byte received and CRC, if enabled and CrcAutoClearOff is cleared,is Ok). Cleared when FIFO is empty.
            </summary>
        </member>
        <member name="F:RfmUsb.Irq.PacketSent">
            <summary>
            Set in Tx when the complete packet has been sent. Cleared when exiting Tx.
            </summary>
        </member>
        <member name="F:RfmUsb.Irq.FifoOverrun">
            <summary>
            Set when FIFO overrun occurs. (except in Sleep mode) Flag(s) and FIFO are cleared when this bit is set.
            The FIFO then becomes immediately available for the next transmission/reception
            </summary>
        </member>
        <member name="F:RfmUsb.Irq.FifoLevel">
            <summary>
            Set when the number of bytes in the FIFO strictly exceeds FifoThreshold, else cleared.
            </summary>
        </member>
        <member name="F:RfmUsb.Irq.FifoNotEmpty">
            <summary>
            Set when FIFO contains at least one byte, else cleared
            </summary>
        </member>
        <member name="F:RfmUsb.Irq.FifoFull">
            <summary>
            Set when FIFO is full (i.e. contains 66 bytes), else cleared
            </summary>
        </member>
        <member name="F:RfmUsb.Irq.AddressMatch">
            <summary>
            Set when Sync and Address (if enabled) are detected. Cleared when leaving Rx or FIFO is emptied.
            This bit is read only in Packet mode, rwc in Continuous mode
            </summary>
        </member>
        <member name="F:RfmUsb.Irq.AutoMode">
            <summary>
            Set when entering Intermediate mode. Cleared when exiting
            Intermediate mode. Please note that in Sleep mode a small
            delay can be observed between AutoMode interrupt and the
            corresponding enter/exit condition.
            </summary>
        </member>
        <member name="F:RfmUsb.Irq.Timeout">
            <summary>
            Set when a timeout occurs (see TimeoutRxStart and TimeoutRssiThresh) Cleared when leaving Rx or FIFO is emptied.
            </summary>
        </member>
        <member name="F:RfmUsb.Irq.Rssi">
            <summary>
            Set in Rx when the RssiValue exceeds RssiThreshold. Cleared when leaving Rx.
            </summary>
        </member>
        <member name="F:RfmUsb.Irq.PllLock">
            <summary>
            Set (in FS, Rx or Tx) when the PLL is locked. Cleared when it is not.
            </summary>
        </member>
        <member name="F:RfmUsb.Irq.TxReady">
            <summary>
            Set in Tx mode, after PA ramp-up. Cleared when leaving Tx.
            </summary>
        </member>
        <member name="F:RfmUsb.Irq.RxReady">
            <summary>
            Set in Rx mode, after RSSI, AGC and AFC. Cleared when leaving Rx.
            </summary>
        </member>
        <member name="F:RfmUsb.Irq.ModeReady">
            <summary>
            Set when the operation mode requested in Mode, is ready
            - Sleep: Entering Sleep mode
            - Standby: XO is running
            - FS: PLL is locked
            - Rx: RSSI sampling starts
            - Tx: PA ramp-up completed
            Cleared when changing operating mode.
            </summary>
        </member>
        <member name="T:RfmUsb.ListenEnd">
            <summary>
            Action taken after acceptance of a packet in Listen mode
            </summary>
        </member>
        <member name="F:RfmUsb.ListenEnd.Rx">
            <summary>
            Chip stays in Rx mode. Listen mode stops and must be disabled.
            </summary>
        </member>
        <member name="F:RfmUsb.ListenEnd.Mode">
            <summary>
            chip stays in Rx mode until PayloadReady orTimeout interrupt occurs. It then goes to the mode defined by Mode.
            </summary>
        </member>
        <member name="F:RfmUsb.ListenEnd.Idle">
            <summary>
            chip stays in Rx mode until PayloadReady or Timeout interrupt occurs. Listen mode then resumes in Idle state.
            FIFO content is lost at next Rx wakeup.
            </summary>
        </member>
        <member name="F:RfmUsb.ListenEnd.Reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="T:RfmUsb.ListenResolution">
            <summary>
            Resolution of Listen mode Idle time
            </summary>
        </member>
        <member name="F:RfmUsb.ListenResolution.Reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:RfmUsb.ListenResolution.Idle64us">
            <summary>
            64 us
            </summary>
        </member>
        <member name="F:RfmUsb.ListenResolution.Idle4_1ms">
            <summary>
            4.1 ms
            </summary>
        </member>
        <member name="F:RfmUsb.ListenResolution.Idle262ms">
            <summary>
            262 ms
            </summary>
        </member>
        <member name="T:RfmUsb.LnaGain">
            <summary>
            LNA gain setting
            </summary>
        </member>
        <member name="F:RfmUsb.LnaGain.Auto">
            <summary>
            Auto
            </summary>
        </member>
        <member name="F:RfmUsb.LnaGain.Max">
            <summary>
            Max
            </summary>
        </member>
        <member name="F:RfmUsb.LnaGain.MaxMinus6db">
            <summary>
            Max - 6db
            </summary>
        </member>
        <member name="F:RfmUsb.LnaGain.MaxMinus12db">
            <summary>
            Max - 12db
            </summary>
        </member>
        <member name="F:RfmUsb.LnaGain.MaxMinus24db">
            <summary>
            Max - 12db
            </summary>
        </member>
        <member name="F:RfmUsb.LnaGain.MaxMinus36db">
            <summary>
            Max - 36db
            </summary>
        </member>
        <member name="F:RfmUsb.LnaGain.MaxMinus48db">
            <summary>
            Max - 48db
            </summary>
        </member>
        <member name="T:RfmUsb.Mode">
            <summary>
            Transceiver’s operating modes
            </summary>
        </member>
        <member name="F:RfmUsb.Mode.Sleep">
            <summary>
            Sleep Mode (SLEEP)
            </summary>
        </member>
        <member name="F:RfmUsb.Mode.Standby">
            <summary>
            Standby Mode (STDBY)
            </summary>
        </member>
        <member name="F:RfmUsb.Mode.Synth">
            <summary>
            Frequency Synthesizer mode (FS)
            </summary>
        </member>
        <member name="F:RfmUsb.Mode.Tx">
            <summary>
            Transmitter mode (TX)
            </summary>
        </member>
        <member name="F:RfmUsb.Mode.Rx">
            <summary>
            Receiver mode (RX)
            </summary>
        </member>
        <member name="T:RfmUsb.Modulation">
            <summary>
            Modulation scheme
            </summary>
        </member>
        <member name="F:RfmUsb.Modulation.Fsk">
            <summary>
            Fsk modulation
            </summary>
        </member>
        <member name="F:RfmUsb.Modulation.Ook">
            <summary>
            Ook modulation
            </summary>
        </member>
        <member name="T:RfmUsb.OcpTrim">
            <summary>
            Trimming of OCP current
            </summary>
        </member>
        <member name="F:RfmUsb.OcpTrim.OcpTrim45">
            <summary>
            45ma
            </summary>
        </member>
        <member name="F:RfmUsb.OcpTrim.OcpTrim50">
            <summary>
            50 ma
            </summary>
        </member>
        <member name="F:RfmUsb.OcpTrim.OcpTrim55">
            <summary>
            55 ma
            </summary>
        </member>
        <member name="F:RfmUsb.OcpTrim.OcpTrim60">
            <summary>
            60 ma
            </summary>
        </member>
        <member name="F:RfmUsb.OcpTrim.OcpTrim65">
            <summary>
            65 ma
            </summary>
        </member>
        <member name="F:RfmUsb.OcpTrim.OcpTrim70">
            <summary>
            70 ma
            </summary>
        </member>
        <member name="F:RfmUsb.OcpTrim.OcpTrim75">
            <summary>
            75 ma
            </summary>
        </member>
        <member name="F:RfmUsb.OcpTrim.OcpTrim80">
            <summary>
            80 ma
            </summary>
        </member>
        <member name="F:RfmUsb.OcpTrim.OcpTrim85">
            <summary>
            85 ma
            </summary>
        </member>
        <member name="F:RfmUsb.OcpTrim.OcpTrim90">
            <summary>
            90 ma
            </summary>
        </member>
        <member name="F:RfmUsb.OcpTrim.OcpTrim95">
            <summary>
            95 ma
            </summary>
        </member>
        <member name="F:RfmUsb.OcpTrim.OcpTrim100">
            <summary>
            100 ma
            </summary>
        </member>
        <member name="F:RfmUsb.OcpTrim.OcpTrim105">
            <summary>
            105 ma
            </summary>
        </member>
        <member name="F:RfmUsb.OcpTrim.OcpTrim110">
            <summary>
            110 ma
            </summary>
        </member>
        <member name="F:RfmUsb.OcpTrim.OcpTrim115">
            <summary>
            115 ma
            </summary>
        </member>
        <member name="F:RfmUsb.OcpTrim.OcpTrim120">
            <summary>
            120 ma
            </summary>
        </member>
        <member name="T:RfmUsb.OokAverageThresholdFilter">
            <summary>
            Filter coefficients in average mode of the OOK demodulator
            </summary>
        </member>
        <member name="F:RfmUsb.OokAverageThresholdFilter.ChipRate32">
            <summary>
            Chip rate / 32.π
            </summary>
        </member>
        <member name="F:RfmUsb.OokAverageThresholdFilter.ChipRate8">
            <summary>
            Chip rate / 8.π
            </summary>
        </member>
        <member name="F:RfmUsb.OokAverageThresholdFilter.ChipRate4">
            <summary>
            Chip rate / 4.π
            </summary>
        </member>
        <member name="F:RfmUsb.OokAverageThresholdFilter.ChipRate2">
            <summary>
            Chip rate / 2.π
            </summary>
        </member>
        <member name="T:RfmUsb.OokModulationShaping">
            <summary>
            The Ook modulation shapping
            </summary>
        </member>
        <member name="F:RfmUsb.OokModulationShaping.None">
            <summary>
            No Shaping
            </summary>
        </member>
        <member name="F:RfmUsb.OokModulationShaping.FilteringBr">
            <summary>
            filtering with fcutoff = BR
            </summary>
        </member>
        <member name="F:RfmUsb.OokModulationShaping.Filtering2Br">
            <summary>
            filtering with fcutoff = 2*BR
            </summary>
        </member>
        <member name="F:RfmUsb.OokModulationShaping.Reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="T:RfmUsb.OokThresholdDec">
            <summary>
            Period of decrement of the RSSI threshold in the OOK demodulator
            </summary>
        </member>
        <member name="F:RfmUsb.OokThresholdDec.OncePerChip">
            <summary>
            Once every chip
            </summary>
        </member>
        <member name="F:RfmUsb.OokThresholdDec.OnceEvery2Chips">
            <summary>
            Once every 2 chips
            </summary>
        </member>
        <member name="F:RfmUsb.OokThresholdDec.OnceEvery4Chips">
            <summary>
            Once every 4 chips
            </summary>
        </member>
        <member name="F:RfmUsb.OokThresholdDec.OnceEvery8Chips">
            <summary>
            Once every 8 chips
            </summary>
        </member>
        <member name="F:RfmUsb.OokThresholdDec.TwiceInEachChip">
            <summary>
            2 times in each chip
            </summary>
        </member>
        <member name="F:RfmUsb.OokThresholdDec.FourTimesInEachChip">
            <summary>
            4 times in each chip
            </summary>
        </member>
        <member name="F:RfmUsb.OokThresholdDec.EightTimesInEachChip">
            <summary>
            8 times in each chip
            </summary>
        </member>
        <member name="F:RfmUsb.OokThresholdDec.SixteeenTimesInEachChip">
            <summary>
            16 times in each chip
            </summary>
        </member>
        <member name="T:RfmUsb.OokThresholdStep">
            <summary>
            Size of each decrement of the RSSI threshold in the OOKdemodulator
            </summary>
        </member>
        <member name="F:RfmUsb.OokThresholdStep.Step0_5db">
            <summary>
            0.5 db
            </summary>
        </member>
        <member name="F:RfmUsb.OokThresholdStep.Step1db">
            <summary>
            1 db
            </summary>
        </member>
        <member name="F:RfmUsb.OokThresholdStep.Step1_5db">
            <summary>
            1.5 db
            </summary>
        </member>
        <member name="F:RfmUsb.OokThresholdStep.Step2db">
            <summary>
            2 db
            </summary>
        </member>
        <member name="F:RfmUsb.OokThresholdStep.Step3db">
            <summary>
            3 db
            </summary>
        </member>
        <member name="F:RfmUsb.OokThresholdStep.Step4db">
            <summary>
            4 db
            </summary>
        </member>
        <member name="F:RfmUsb.OokThresholdStep.Step5db">
            <summary>
            5 db
            </summary>
        </member>
        <member name="F:RfmUsb.OokThresholdStep.Step6db">
            <summary>
            6 db
            </summary>
        </member>
        <member name="T:RfmUsb.OokThresholdType">
            <summary>
            Selects type of threshold in the OOK data slicer
            </summary>
        </member>
        <member name="F:RfmUsb.OokThresholdType.Fixed">
            <summary>
            Fixed
            </summary>
        </member>
        <member name="F:RfmUsb.OokThresholdType.Peak">
            <summary>
            Peak
            </summary>
        </member>
        <member name="F:RfmUsb.OokThresholdType.Average">
            <summary>
            Average
            </summary>
        </member>
        <member name="F:RfmUsb.OokThresholdType.Reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="T:RfmUsb.PaRamp">
            <summary>
            Rise/Fall time of ramp up/down in FSK
            </summary>
        </member>
        <member name="F:RfmUsb.PaRamp.PowerAmpRamp3400">
            <summary>
            3.4 ms
            </summary>
        </member>
        <member name="F:RfmUsb.PaRamp.PowerAmpRamp2000">
            <summary>
            2 ms
            </summary>
        </member>
        <member name="F:RfmUsb.PaRamp.PowerAmpRamp1000">
            <summary>
            1 us
            </summary>
        </member>
        <member name="F:RfmUsb.PaRamp.PowerAmpRamp500">
            <summary>
            500 us
            </summary>
        </member>
        <member name="F:RfmUsb.PaRamp.PowerAmpRamp250">
            <summary>
            250 us
            </summary>
        </member>
        <member name="F:RfmUsb.PaRamp.PowerAmpRamp125">
            <summary>
            125 us
            </summary>
        </member>
        <member name="F:RfmUsb.PaRamp.PowerAmpRamp100">
            <summary>
            100 us
            </summary>
        </member>
        <member name="F:RfmUsb.PaRamp.PowerAmpRamp62">
            <summary>
            62 us
            </summary>
        </member>
        <member name="F:RfmUsb.PaRamp.PowerAmpRamp50">
            <summary>
            50 us
            </summary>
        </member>
        <member name="F:RfmUsb.PaRamp.PowerAmpRamp40">
            <summary>
            40 us
            </summary>
        </member>
        <member name="F:RfmUsb.PaRamp.PowerAmpRamp31">
            <summary>
            31 us
            </summary>
        </member>
        <member name="F:RfmUsb.PaRamp.PowerAmpRamp25">
            <summary>
            25 us
            </summary>
        </member>
        <member name="F:RfmUsb.PaRamp.PowerAmpRamp20">
            <summary>
            20 us
            </summary>
        </member>
        <member name="F:RfmUsb.PaRamp.PowerAmpRamp15">
            <summary>
            15 us
            </summary>
        </member>
        <member name="F:RfmUsb.PaRamp.PowerAmpRamp12">
            <summary>
            12 us
            </summary>
        </member>
        <member name="F:RfmUsb.PaRamp.PowerAmpRamp10">
            <summary>
            10 us
            </summary>
        </member>
        <member name="T:RfmUsb.Ports.ISerialPort">
            <summary>
            Defines a serial port interface
            </summary>
        </member>
        <member name="P:RfmUsb.Ports.ISerialPort.Handshake">
            <summary>
            Gets or sets the handshaking protocol for serial port transmission of data using a value from System.IO.Ports.Handshake.
            </summary>
        </member>
        <member name="P:RfmUsb.Ports.ISerialPort.Encoding">
            <summary>
            Gets or sets the byte encoding for pre- and post-transmission conversion of text.
            </summary>
        </member>
        <member name="P:RfmUsb.Ports.ISerialPort.DtrEnable">
            <summary>
            Gets or sets a value that enables the Data Terminal Ready (DTR) signal during serial communication.
            </summary>
        </member>
        <member name="P:RfmUsb.Ports.ISerialPort.CtsHolding">
            <summary>
            Gets the state of the Clear-to-Send line.
            </summary>
        </member>
        <member name="P:RfmUsb.Ports.ISerialPort.DiscardNull">
            <summary>
            Gets or sets a value indicating whether null bytes are ignored when transmitted between the port and the receive buffer.
            </summary>
        </member>
        <member name="P:RfmUsb.Ports.ISerialPort.DataBits">
            <summary>
            Gets or sets the standard length of data bits per byte.
            </summary>
        </member>
        <member name="P:RfmUsb.Ports.ISerialPort.IsOpen">
            <summary>
            Gets a value indicating the open or closed status of the <see cref="T:RfmUsb.Ports.ISerialPort" /> object.
            </summary>
        </member>
        <member name="P:RfmUsb.Ports.ISerialPort.DsrHolding">
            <summary>
            Gets the state of the Data Set Ready (DSR) signal.
            </summary>
        </member>
        <member name="P:RfmUsb.Ports.ISerialPort.NewLine">
            <summary>
            Gets or sets the value used to interpret the end of a call to the <see cref="T:RfmUsb.Ports.ISerialPort" />.ReadLine
            and <see cref="T:RfmUsb.Ports.ISerialPort" />.WriteLine(System.String) methods.
            </summary>
        </member>
        <member name="P:RfmUsb.Ports.ISerialPort.ReadBufferSize">
            <summary>
            Gets or sets the size of the <see cref="T:RfmUsb.Ports.ISerialPort" /> input buffer.
            </summary>
        </member>
        <member name="P:RfmUsb.Ports.ISerialPort.ParityReplace">
            <summary>
            Gets or sets the byte that replaces invalid bytes in a data stream when a parity error occurs.
            </summary>
        </member>
        <member name="P:RfmUsb.Ports.ISerialPort.PortName">
            <summary>
            Gets or sets the port for communications, including but not limited to all available COM ports.
            </summary>
        </member>
        <member name="P:RfmUsb.Ports.ISerialPort.CDHolding">
            <summary>
            Gets the state of the Carrier Detect line for the port.
            </summary>
        </member>
        <member name="P:RfmUsb.Ports.ISerialPort.ReadTimeout">
            <summary>
            Gets or sets the number of milliseconds before a time-out occurs when a read operation does not finish.
            </summary>
        </member>
        <member name="P:RfmUsb.Ports.ISerialPort.ReceivedBytesThreshold">
            <summary>
            Gets or sets the number of bytes in the internal input buffer before a <see cref="T:RfmUsb.Ports.ISerialPort" />.DataReceived event occurs.
            </summary>
        </member>
        <member name="P:RfmUsb.Ports.ISerialPort.RtsEnable">
            <summary>
            Gets or sets a value indicating whether the Request to Send (RTS) signal is enabled during serial communication.
            </summary>
        </member>
        <member name="P:RfmUsb.Ports.ISerialPort.StopBits">
            <summary>
            Gets or sets the standard number of stopbits per byte.
            </summary>
        </member>
        <member name="P:RfmUsb.Ports.ISerialPort.WriteBufferSize">
            <summary>
            Gets or sets the size of the serial port output buffer.
            </summary>
        </member>
        <member name="P:RfmUsb.Ports.ISerialPort.WriteTimeout">
            <summary>
            Gets or sets the number of milliseconds before a time-out occurs when a write operation does not finish.
            </summary>
        </member>
        <member name="P:RfmUsb.Ports.ISerialPort.Parity">
            <summary>
            Gets or sets the parity-checking protocol.
            </summary>
        </member>
        <member name="P:RfmUsb.Ports.ISerialPort.BytesToWrite">
            <summary>
            Gets the number of bytes of data in the send buffer.
            </summary>
        </member>
        <member name="P:RfmUsb.Ports.ISerialPort.BaudRate">
            <summary>
            Gets or sets the serial baud rate.
            </summary>
        </member>
        <member name="P:RfmUsb.Ports.ISerialPort.BreakState">
            <summary>
            Gets or sets the break signal state.
            </summary>
        </member>
        <member name="P:RfmUsb.Ports.ISerialPort.BaseStream">
            <summary>
            Gets the underlying System.IO.Stream object for a <see cref="T:RfmUsb.Ports.ISerialPort" /> object.
            </summary>
        </member>
        <member name="P:RfmUsb.Ports.ISerialPort.BytesToRead">
            <summary>
            Gets the number of bytes of data in the receive buffer.
            </summary>
        </member>
        <member name="E:RfmUsb.Ports.ISerialPort.DataReceived">
            <summary>
            Indicates that data has been received through a port represented by the <see cref="T:RfmUsb.Ports.ISerialPort" /> object.
            </summary>
        </member>
        <member name="E:RfmUsb.Ports.ISerialPort.PinChanged">
            <summary>
            Indicates that a non-data signal event has occurred on the port represented by the <see cref="T:RfmUsb.Ports.ISerialPort" /> object.
            </summary>
        </member>
        <member name="E:RfmUsb.Ports.ISerialPort.ErrorReceived">
            <summary>
            Indicates that an error has occurred with a port represented by a <see cref="T:RfmUsb.Ports.ISerialPort" /> object.
            </summary>
        </member>
        <member name="M:RfmUsb.Ports.ISerialPort.Close">
            <summary>
            Closes the port connection, sets the <see cref="T:RfmUsb.Ports.ISerialPort" />.IsOpen property
            to false, and disposes of the internal <see cref="T:System.IO.Stream" /> object.
            </summary>
        </member>
        <member name="M:RfmUsb.Ports.ISerialPort.DiscardInBuffer">
            <summary>
            Discards data from the serial driver's receive buffer.
            </summary>
        </member>
        <member name="M:RfmUsb.Ports.ISerialPort.DiscardOutBuffer">
            <summary>
            Discards data from the serial driver's transmit buffer.
            </summary>
        </member>
        <member name="M:RfmUsb.Ports.ISerialPort.Open">
            <summary>
            Opens a new serial port connection.
            </summary>
        </member>
        <member name="M:RfmUsb.Ports.ISerialPort.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a number of bytes from the <see cref="T:RfmUsb.Ports.ISerialPort" /> input buffer and
            writes those bytes into a byte array at the specified offset.
            </summary>
        </member>
        <member name="M:RfmUsb.Ports.ISerialPort.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a number of characters from the <see cref="T:RfmUsb.Ports.ISerialPort" /> input buffer and writes them into an array of characters at a given offset.
            </summary>
        </member>
        <member name="M:RfmUsb.Ports.ISerialPort.ReadByte">
            <summary>
            Synchronously reads one byte from the <see cref="T:RfmUsb.Ports.ISerialPort" /> input buffer.
            </summary>
        </member>
        <member name="M:RfmUsb.Ports.ISerialPort.ReadChar">
            <summary>
            Synchronously reads one character from the <see cref="T:RfmUsb.Ports.ISerialPort" /> input buffer.
            </summary>
        </member>
        <member name="M:RfmUsb.Ports.ISerialPort.ReadExisting">
            <summary>
            Reads all immediately available bytes, based on the encoding, in both the stream
            and the input buffer of the <see cref="T:RfmUsb.Ports.ISerialPort" /> object.
            </summary>
        </member>
        <member name="M:RfmUsb.Ports.ISerialPort.ReadLine">
            <summary>
            Reads up to the <see cref="T:RfmUsb.Ports.ISerialPort" />.NewLine value in the input buffer.
            </summary>
        </member>
        <member name="M:RfmUsb.Ports.ISerialPort.ReadTo(System.String)">
            <summary>Reads a string up to the specified value in the input buffer.
            </summary>
        </member>
        <member name="M:RfmUsb.Ports.ISerialPort.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a specified number of bytes to the serial port using data from a buffer.
            </summary>
        </member>
        <member name="M:RfmUsb.Ports.ISerialPort.Write(System.String)">
            <summary>
            Writes the specified string to the serial port.
            </summary>
        </member>
        <member name="M:RfmUsb.Ports.ISerialPort.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a specified number of characters to the serial port using data from a buffer.
            </summary>
        </member>
        <member name="M:RfmUsb.Ports.ISerialPort.WriteLine(System.String)">
            <summary>
            Writes the specified string and the <see cref="P:RfmUsb.Ports.ISerialPort.NewLine" /> value to the output buffer.
            </summary>
        </member>
        <member name="T:RfmUsb.Ports.ISerialPortFactory">
            <summary>
            Defines the <see cref="T:RfmUsb.Ports.ISerialPortFactory" /> interface
            </summary>
        </member>
        <member name="M:RfmUsb.Ports.ISerialPortFactory.GetSerialPorts">
            <summary>
            Get the list of serial ports in the system
            </summary>
            <returns></returns>
        </member>
        <member name="M:RfmUsb.Ports.ISerialPortFactory.CreateSerialPortInstance(System.String)">
            <summary>
            Create an <see cref="T:RfmUsb.Ports.ISerialPort" /> instance
            </summary>
            <param name="serialPort"></param>
            <returns></returns>
        </member>
        <member name="T:RfmUsb.Ports.PortsServiceExtensions">
            <summary>
            An <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> extensions
            </summary>
        </member>
        <member name="M:RfmUsb.Ports.PortsServiceExtensions.AddSerialPortFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the <see cref="T:RfmUsb.Ports.ISerialPortFactory" /> instance to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
            </summary>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /></param>
            <returns></returns>
        </member>
        <member name="M:RfmUsb.Ports.SerialPortFactory.CreateSerialPortInstance(System.String)">
            <summary>
            Create an instance of a <see cref="T:RfmUsb.Ports.ISerialPort" />
            </summary>
            <param name="serialPort">The port to use (for example, COM1).</param>
            <returns>An instance of the <see cref="T:RfmUsb.Ports.ISerialPort" /></returns>
        </member>
        <member name="M:RfmUsb.Ports.SerialPortFactory.GetSerialPorts">
            <summary>
            Get the list of serial ports from the OD
            </summary>
            <returns></returns>
        </member>
        <member name="T:RfmUsb.RfmUsb">
            <summary>
            An implementation of the <see cref="T:RfmUsb.IRfmUsb" /> interface
            </summary>
        </member>
        <member name="M:RfmUsb.RfmUsb.#ctor(Microsoft.Extensions.Logging.ILogger{RfmUsb.IRfmUsb},RfmUsb.Ports.ISerialPortFactory)">
            <summary>
            Create an instance of a <see cref="T:RfmUsb.RfmUsb" />
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger`1" /> for logging</param>
            <param name="serialPortFactory">The <see cref="T:RfmUsb.Ports.ISerialPortFactory" /> instance for creating and querying serial port instances</param>
        </member>
        <member name="P:RfmUsb.RfmUsb.Fifo">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.Sequencer">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.ListenerOn">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.Mode">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.Modulation">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.FskModulationShaping">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.OokModulationShaping">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.BitRate">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.FrequencyDeviation">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.Frequency">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.AfcLowBetaOn">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.ListenResolutionIdle">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.ListenResolutionRx">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.ListenCriteria">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.ListenEnd">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.ListenCoefficentIdle">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.ListenCoefficentRx">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.Version">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.OutputPower">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.PaRamp">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.OcpEnable">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.OcpTrim">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.Impedance">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.CurrentLnaGain">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.LnaGainSelect">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.DccFreq">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.RxBw">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.DccFreqAfc">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.RxBwAfc">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.OokThresholdType">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.OokPeakThresholdStep">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.OokPeakThresholdDec">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.OokAverageThresholdFilter">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.OokFixedThreshold">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.AfcAutoClear">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.AfcAutoOn">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.Afc">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.Fei">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.Rssi">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.Irq">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.RssiThreshold">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.TimeoutRxStart">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.TimeoutRssiThreshold">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.PreambleSize">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.SyncEnable">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.FifoFill">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.SyncBitErrors">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.Sync">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.SyncSize">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.PacketFormat">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.DcFree">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.CrcOn">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.CrcAutoClear">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.AddressFiltering">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.PayloadLength">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.NodeAddress">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.BroadcastAddress">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.EnterCondition">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.ExitCondition">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.IntermediateMode">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.TxStartCondition">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.FifoThreshold">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.InterPacketRxDelay">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.AutoRxRestartOn">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.AesOn">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.TemperatureValue">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.SensitivityBoost">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.ContinuousDagc">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.LowBetaAfcOffset">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.DioInterruptMask">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.Timeout">
            <inheritdoc />
        </member>
        <member name="P:RfmUsb.RfmUsb.RadioConfig">
            <inheritdoc />
        </member>
        <member name="M:RfmUsb.RfmUsb.AfcClear">
            <inheritdoc />
        </member>
        <member name="M:RfmUsb.RfmUsb.AfcStart">
            <inheritdoc />
        </member>
        <member name="M:RfmUsb.RfmUsb.Close">
            <inheritdoc />
        </member>
        <member name="M:RfmUsb.RfmUsb.FeiStart">
            <inheritdoc />
        </member>
        <member name="M:RfmUsb.RfmUsb.ListenAbort">
            <inheritdoc />
        </member>
        <member name="M:RfmUsb.RfmUsb.MeasureTemperature">
            <inheritdoc />
        </member>
        <member name="M:RfmUsb.RfmUsb.Open(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RfmUsb.RfmUsb.RcCalibration">
            <inheritdoc />
        </member>
        <member name="M:RfmUsb.RfmUsb.Reset">
            <inheritdoc />
        </member>
        <member name="M:RfmUsb.RfmUsb.RestartRx">
            <inheritdoc />
        </member>
        <member name="M:RfmUsb.RfmUsb.SetAesKey(System.Collections.Generic.IEnumerable{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:RfmUsb.RfmUsb.SetDioMapping(RfmUsb.Dio,RfmUsb.DioMapping)">
            <inheritdoc />
        </member>
        <member name="M:RfmUsb.RfmUsb.GetDioMapping(RfmUsb.Dio,RfmUsb.DioMapping@)">
            <inheritdoc />
        </member>
        <member name="M:RfmUsb.RfmUsb.StartRssi">
            <inheritdoc />
        </member>
        <member name="M:RfmUsb.RfmUsb.GetRadioConfigurations">
            <inheritdoc />
        </member>
        <member name="M:RfmUsb.RfmUsb.Transmit(System.Collections.Generic.IList{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:RfmUsb.RfmUsb.Transmit(System.Collections.Generic.IList{System.Byte},System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RfmUsb.RfmUsb.TransmitReceive(System.Collections.Generic.IList{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:RfmUsb.RfmUsb.TransmitReceive(System.Collections.Generic.IList{System.Byte},System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RfmUsb.RfmUsb.TransmitReceive(System.Collections.Generic.IList{System.Byte},System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RfmUsb.RfmUsb.WaitForIrq">
            <inheritdoc />
        </member>
        <member name="M:RfmUsb.RfmUsb.Dispose(System.Boolean)">
            <summary>
            Dispose the <see cref="T:RfmUsb.IRfmUsb" /> instance
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:RfmUsb.RfmUsb.Dispose">
            <summary>
            Dispose the <see cref="T:RfmUsb.IRfmUsb" /> instance
            </summary>
        </member>
        <member name="T:RfmUsb.RfmUsbServiceExtensions">
            <summary>
            Extensions for the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to enable configuration of rfmusb dependencies
            </summary>
        </member>
        <member name="M:RfmUsb.RfmUsbServiceExtensions.AddRfmUsb(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add a singleton instance of an <see cref="T:RfmUsb.IRfmUsb" /> implementation
            </summary>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the <see cref="T:RfmUsb.IRfmUsb" /> instance</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /></returns>
        </member>
    </members>
</doc>